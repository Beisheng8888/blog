const n=JSON.parse('{"key":"v-1542590e","path":"/src/JavaSE/IO%E6%B5%8101.html","title":"IO流01","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2022-01-01T00:00:00.000Z","category":["JavaSE"],"description":"IO流01 1.File类 1.1File类概述和构造方法【应用】 File类介绍 它是文件和目录路径名的抽象表示 文件和目录是可以通过File封装成对象的 对于File而言,其封装的并不是一个真正存在的文件,仅仅是一个路径名而已.它可以是存在的,也可以是不存在的.将来是要通过具体的操作把这个路径的内容转换为具体存在的 File类的构造方法 方法名 说明 File(String pathname) 通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例 File(String parent, String child) 从父路径名字符串和子路径名字符串创建新的 File实例 File(File parent, String child) 从父抽象路径名和子路径名字符串创建新的 File实例 示例代码 public class FileDemo01 { public static void main(String[] args) { //File(String pathname): 通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例 File f1 = new File(\\"E:\\\\\\\\beisheng\\\\\\\\java.txt\\"); System.out.println(f1); //File(String parent, String child): 从父路径名字符串和子路径名字符串创建新的 File实例 File f2 = new File(\\"E:\\\\\\\\beisheng\\",\\"java.txt\\"); System.out.println(f2); //File(File parent, String child): 从父抽象路径名和子路径名字符串创建新的 File实例 File f3 = new File(\\"E:\\\\\\\\beisheng\\"); File f4 = new File(f3,\\"java.txt\\"); System.out.println(f4); } }","head":[["meta",{"property":"og:url","content":"https://github.com/Beisheng8888/blog/src/JavaSE/IO%E6%B5%8101.html"}],["meta",{"property":"og:site_name","content":"冀辉的博客"}],["meta",{"property":"og:title","content":"IO流01"}],["meta",{"property":"og:description","content":"IO流01 1.File类 1.1File类概述和构造方法【应用】 File类介绍 它是文件和目录路径名的抽象表示 文件和目录是可以通过File封装成对象的 对于File而言,其封装的并不是一个真正存在的文件,仅仅是一个路径名而已.它可以是存在的,也可以是不存在的.将来是要通过具体的操作把这个路径的内容转换为具体存在的 File类的构造方法 方法名 说明 File(String pathname) 通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例 File(String parent, String child) 从父路径名字符串和子路径名字符串创建新的 File实例 File(File parent, String child) 从父抽象路径名和子路径名字符串创建新的 File实例 示例代码 public class FileDemo01 { public static void main(String[] args) { //File(String pathname): 通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例 File f1 = new File(\\"E:\\\\\\\\beisheng\\\\\\\\java.txt\\"); System.out.println(f1); //File(String parent, String child): 从父路径名字符串和子路径名字符串创建新的 File实例 File f2 = new File(\\"E:\\\\\\\\beisheng\\",\\"java.txt\\"); System.out.println(f2); //File(File parent, String child): 从父抽象路径名和子路径名字符串创建新的 File实例 File f3 = new File(\\"E:\\\\\\\\beisheng\\"); File f4 = new File(f3,\\"java.txt\\"); System.out.println(f4); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-14T09:28:16.000Z"}],["meta",{"property":"article:author","content":"Mr.JH"}],["meta",{"property":"article:published_time","content":"2022-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-14T09:28:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IO流01\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-14T09:28:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.JH\\",\\"url\\":\\"https://github.com/Beisheng8888\\"}]}"]]},"headers":[{"level":2,"title":"1.File类","slug":"_1-file类","link":"#_1-file类","children":[{"level":3,"title":"1.1File类概述和构造方法【应用】","slug":"_1-1file类概述和构造方法【应用】","link":"#_1-1file类概述和构造方法【应用】","children":[]},{"level":3,"title":"1.2绝对路径和相对路径【理解】","slug":"_1-2绝对路径和相对路径【理解】","link":"#_1-2绝对路径和相对路径【理解】","children":[]},{"level":3,"title":"1.3File类创建功能【应用】","slug":"_1-3file类创建功能【应用】","link":"#_1-3file类创建功能【应用】","children":[]},{"level":3,"title":"1.4File类删除功能【应用】","slug":"_1-4file类删除功能【应用】","link":"#_1-4file类删除功能【应用】","children":[]},{"level":3,"title":"1.5File类判断和获取功能【应用】","slug":"_1-5file类判断和获取功能【应用】","link":"#_1-5file类判断和获取功能【应用】","children":[]},{"level":3,"title":"1.6File类练习一【应用】","slug":"_1-6file类练习一【应用】","link":"#_1-6file类练习一【应用】","children":[]},{"level":3,"title":"1.7File类练习二【应用】","slug":"_1-7file类练习二【应用】","link":"#_1-7file类练习二【应用】","children":[]},{"level":3,"title":"1.8File类练习三【应用】","slug":"_1-8file类练习三【应用】","link":"#_1-8file类练习三【应用】","children":[]}]},{"level":2,"title":"2.字节流","slug":"_2-字节流","link":"#_2-字节流","children":[{"level":3,"title":"2.1 IO流概述和分类【理解】","slug":"_2-1-io流概述和分类【理解】","link":"#_2-1-io流概述和分类【理解】","children":[]},{"level":3,"title":"2.2字节流写数据【应用】","slug":"_2-2字节流写数据【应用】","link":"#_2-2字节流写数据【应用】","children":[]},{"level":3,"title":"2.3字节流写数据的三种方式【应用】","slug":"_2-3字节流写数据的三种方式【应用】","link":"#_2-3字节流写数据的三种方式【应用】","children":[]},{"level":3,"title":"2.4字节流写数据的两个小问题【应用】","slug":"_2-4字节流写数据的两个小问题【应用】","link":"#_2-4字节流写数据的两个小问题【应用】","children":[]},{"level":3,"title":"2.5字节流写数据加异常处理【应用】","slug":"_2-5字节流写数据加异常处理【应用】","link":"#_2-5字节流写数据加异常处理【应用】","children":[]},{"level":3,"title":"2.6字节流读数据(一次读一个字节数据)【应用】","slug":"_2-6字节流读数据-一次读一个字节数据-【应用】","link":"#_2-6字节流读数据-一次读一个字节数据-【应用】","children":[]},{"level":3,"title":"2.7字节流复制文件【应用】","slug":"_2-7字节流复制文件【应用】","link":"#_2-7字节流复制文件【应用】","children":[]},{"level":3,"title":"2.8字节流读数据(一次读一个字节数组数据)【应用】","slug":"_2-8字节流读数据-一次读一个字节数组数据-【应用】","link":"#_2-8字节流读数据-一次读一个字节数组数据-【应用】","children":[]},{"level":3,"title":"2.9字节流复制文件【应用】","slug":"_2-9字节流复制文件【应用】","link":"#_2-9字节流复制文件【应用】","children":[]}]},{"level":2,"title":"3.字节缓冲流","slug":"_3-字节缓冲流","link":"#_3-字节缓冲流","children":[{"level":3,"title":"3.1字节缓冲流构造方法【应用】","slug":"_3-1字节缓冲流构造方法【应用】","link":"#_3-1字节缓冲流构造方法【应用】","children":[]},{"level":3,"title":"3.2字节缓冲流复制视频【应用】","slug":"_3-2字节缓冲流复制视频【应用】","link":"#_3-2字节缓冲流复制视频【应用】","children":[]}]}],"git":{"createdTime":1689316800000,"updatedTime":1689326896000,"contributors":[{"name":"北省","email":"jih6666@126.com","commits":2}]},"readingTime":{"minutes":17.33,"words":5200},"filePathRelative":"src/JavaSE/IO流01.md","localizedDate":"2022年1月1日","excerpt":"<h1> IO流01</h1>\\n<h2> 1.File类</h2>\\n<h3> 1.1File类概述和构造方法【应用】</h3>\\n<ul>\\n<li>\\n<p>File类介绍</p>\\n<ul>\\n<li>它是文件和目录路径名的抽象表示</li>\\n<li>文件和目录是可以通过File封装成对象的</li>\\n<li>对于File而言,其封装的并不是一个真正存在的文件,仅仅是一个路径名而已.它可以是存在的,也可以是不存在的.将来是要通过具体的操作把这个路径的内容转换为具体存在的</li>\\n</ul>\\n</li>\\n<li>\\n<p>File类的构造方法</p>\\n<table>\\n<thead>\\n<tr>\\n<th>方法名</th>\\n<th>说明</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>File(String   pathname)</td>\\n<td>通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例</td>\\n</tr>\\n<tr>\\n<td>File(String   parent, String child)</td>\\n<td>从父路径名字符串和子路径名字符串创建新的   File实例</td>\\n</tr>\\n<tr>\\n<td>File(File   parent, String child)</td>\\n<td>从父抽象路径名和子路径名字符串创建新的   File实例</td>\\n</tr>\\n</tbody>\\n</table>\\n</li>\\n<li>\\n<p>示例代码</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">FileDemo01</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">//File(String pathname): 通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例</span>\\n        <span class=\\"token class-name\\">File</span> f1 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">File</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"E:\\\\\\\\beisheng\\\\\\\\java.txt\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>f1<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">//File(String parent, String child): 从父路径名字符串和子路径名字符串创建新的 File实例</span>\\n        <span class=\\"token class-name\\">File</span> f2 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">File</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"E:\\\\\\\\beisheng\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"java.txt\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>f2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">//File(File parent, String child): 从父抽象路径名和子路径名字符串创建新的 File实例</span>\\n        <span class=\\"token class-name\\">File</span> f3 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">File</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"E:\\\\\\\\beisheng\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">File</span> f4 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">File</span><span class=\\"token punctuation\\">(</span>f3<span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"java.txt\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>f4<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>","autoDesc":true}');export{n as data};
