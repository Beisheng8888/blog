import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o,c as r,a,b as e,d as s,e as i}from"./app-98de2e9d.js";const c="/blog/assets/image-20210423191210349-46640728.png",d="/blog/assets/image-20210713104511055-1ba38326.png",p="/blog/assets/image-20210713104808909-cd3479bc.png",u="/blog/assets/image-20210713105135701-8e3afb2f.png",m="/blog/assets/image-20210713105339785-b39744a3.png",b="/blog/assets/image-20210713105829435-4baf92e3.png",g="/blog/assets/image-20210717212345165-5014f598.png",v="/blog/assets/image-20210717222833196-62143779.png",h="/blog/assets/image-20210717223057902-4021e495.png",q="/blog/assets/image-20210717223421750-e6095333.png",k="/blog/assets/image-20210717223320238-56ec0ef4.png",f="/blog/assets/image-20210717223603628-a407fd64.png",_="/blog/assets/image-20210717223800203-b706ca9d.png",x="/blog/assets/image-20210717231751411-68caad2e.png",y="/blog/assets/image-20210717231829505-42ca3232.png",M="/blog/assets/image-20210717231958996-edd09826.png",A="/blog/assets/image-20210717232108584-ad9930ae.png",Q="/blog/assets/image-20210717232257420-2e73e273.png",E="/blog/assets/image-20210717232322646-fbbc47dd.png",B="/blog/assets/image-20210717234329640-a6584c37.png",R="/blog/assets/image-20210717234426209-33619081.png",D="/blog/assets/image-20210718001909492-918ea15c.png",z="/blog/assets/image-20210718002118357-d4f0dbca.png",w="/blog/assets/image-20210718002253226-e8b2f3ca.png",T="/blog/assets/image-20210718002342603-65546e46.png",I="/blog/assets/image-20210718002422365-689e4085.png",S={},U=i(`<h1 id="rabbitmq部署指南" tabindex="-1"><a class="header-anchor" href="#rabbitmq部署指南" aria-hidden="true">#</a> RabbitMQ部署指南</h1><h1 id="_1-单机部署" tabindex="-1"><a class="header-anchor" href="#_1-单机部署" aria-hidden="true">#</a> 1.单机部署</h1><p>我们在Centos7虚拟机中使用Docker来安装。</p><h2 id="_1-1-下载镜像" tabindex="-1"><a class="header-anchor" href="#_1-1-下载镜像" aria-hidden="true">#</a> 1.1.下载镜像</h2><p>方式一：在线拉取</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull rabbitmq:3.8-management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>方式二：从本地加载</p><p>在课前资料已经提供了镜像包：</p><figure><img src="`+c+`" alt="image-20210423191210349" tabindex="0" loading="lazy"><figcaption>image-20210423191210349</figcaption></figure><p>上传到虚拟机中后，使用命令加载镜像即可：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> load <span class="token parameter variable">-i</span> mq.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_1-2-安装mq" tabindex="-1"><a class="header-anchor" href="#_1-2-安装mq" aria-hidden="true">#</a> 1.2.安装MQ</h2><p>执行下面的命令来运行MQ容器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">\\</span>
 <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>root <span class="token punctuation">\\</span>
 <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span><span class="token number">1234</span> <span class="token punctuation">\\</span>
 <span class="token parameter variable">-v</span> mq-plugins:/plugins <span class="token punctuation">\\</span>
 <span class="token parameter variable">--name</span> mq <span class="token punctuation">\\</span>
 <span class="token parameter variable">--hostname</span> mq1 <span class="token punctuation">\\</span>
 <span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 <span class="token punctuation">\\</span>
 <span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672 <span class="token punctuation">\\</span>
 <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
 rabbitmq:3.8-management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_2-安装delayexchange插件" tabindex="-1"><a class="header-anchor" href="#_2-安装delayexchange插件" aria-hidden="true">#</a> 2.安装DelayExchange插件</h1>`,15),F={href:"https://blog.rabbitmq.com/posts/2015/04/scheduling-messages-with-rabbitmq",target:"_blank",rel:"noopener noreferrer"},L=a("p",null,"上述文档是基于linux原生安装RabbitMQ，然后安装插件。",-1),P=a("p",null,"因为我们之前是基于Docker安装RabbitMQ，所以下面我们会讲解基于Docker来安装RabbitMQ插件。",-1),C=a("h2",{id:"_2-1-下载插件",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_2-1-下载插件","aria-hidden":"true"},"#"),e(" 2.1.下载插件")],-1),V={href:"https://www.rabbitmq.com/community-plugins.html",target:"_blank",rel:"noopener noreferrer"},W=a("p",null,"其中包含各种各样的插件，包括我们要使用的DelayExchange插件：",-1),$=a("figure",null,[a("img",{src:d,alt:"image-20210713104511055",tabindex:"0",loading:"lazy"}),a("figcaption",null,"image-20210713104511055")],-1),Z={href:"https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/tag/3.8.9%E8%BF%99%E4%B8%AA%E5%AF%B9%E5%BA%94RabbitMQ%E7%9A%843.8.5%E4%BB%A5%E4%B8%8A%E7%89%88%E6%9C%AC%E3%80%82",target:"_blank",rel:"noopener noreferrer"},N=i('<p>课前资料也提供了下载好的插件：</p><figure><img src="'+p+`" alt="image-20210713104808909" tabindex="0" loading="lazy"><figcaption>image-20210713104808909</figcaption></figure><h2 id="_2-2-上传插件" tabindex="-1"><a class="header-anchor" href="#_2-2-上传插件" aria-hidden="true">#</a> 2.2.上传插件</h2><p>因为我们是基于Docker安装，所以需要先查看RabbitMQ的插件目录对应的数据卷。如果不是基于Docker的同学，请参考第一章部分，重新创建Docker容器。</p><p>我们之前设定的RabbitMQ的数据卷名称为<code>mq-plugins</code>，所以我们使用下面命令查看数据卷：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume inspect mq-plugins
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以得到下面结果：</p><figure><img src="`+u+'" alt="image-20210713105135701" tabindex="0" loading="lazy"><figcaption>image-20210713105135701</figcaption></figure><p>接下来，将插件上传到这个目录即可：</p><figure><img src="'+m+`" alt="image-20210713105339785" tabindex="0" loading="lazy"><figcaption>image-20210713105339785</figcaption></figure><h2 id="_2-3-安装插件" tabindex="-1"><a class="header-anchor" href="#_2-3-安装插件" aria-hidden="true">#</a> 2.3.安装插件</h2><p>最后就是安装了，需要进入MQ容器内部来执行安装。我的容器名为<code>mq</code>，所以执行下面命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mq <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行时，请将其中的 <code>-it</code> 后面的<code>mq</code>替换为你自己的容器名.</p><p>进入容器内部后，执行下面命令开启插件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_delayed_message_exchange
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果如下：</p><figure><img src="`+b+`" alt="image-20210713105829435" tabindex="0" loading="lazy"><figcaption>image-20210713105829435</figcaption></figure><h1 id="_3-集群部署" tabindex="-1"><a class="header-anchor" href="#_3-集群部署" aria-hidden="true">#</a> 3.集群部署</h1><p>接下来，我们看看如何安装RabbitMQ的集群。</p><h2 id="_2-1-集群分类" tabindex="-1"><a class="header-anchor" href="#_2-1-集群分类" aria-hidden="true">#</a> 2.1.集群分类</h2><p>在RabbitMQ的官方文档中，讲述了两种集群的配置方式：</p><ul><li>普通模式：普通模式集群不进行数据同步，每个MQ都有自己的队列、数据信息（其它元数据信息如交换机等会同步）。例如我们有2个MQ：mq1，和mq2，如果你的消息在mq1，而你连接到了mq2，那么mq2会去mq1拉取消息，然后返回给你。如果mq1宕机，消息就会丢失。</li><li>镜像模式：与普通模式不同，队列会在各个mq的镜像节点之间同步，因此你连接到任何一个镜像节点，均可获取到消息。而且如果一个节点宕机，并不会导致数据丢失。不过，这种方式增加了数据同步的带宽消耗。</li></ul><p>我们先来看普通模式集群，我们的计划部署3节点的mq集群：</p><table><thead><tr><th>主机名</th><th>控制台端口</th><th>amqp通信端口</th></tr></thead><tbody><tr><td>mq1</td><td>8081 ---&gt; 15672</td><td>8071 ---&gt; 5672</td></tr><tr><td>mq2</td><td>8082 ---&gt; 15672</td><td>8072 ---&gt; 5672</td></tr><tr><td>mq3</td><td>8083 ---&gt; 15672</td><td>8073 ---&gt; 5672</td></tr></tbody></table><p>集群中的节点标示默认都是：<code>rabbit@[hostname]</code>，因此以上三个节点的名称分别为：</p><ul><li>rabbit@mq1</li><li>rabbit@mq2</li><li>rabbit@mq3</li></ul><h2 id="_2-2-获取cookie" tabindex="-1"><a class="header-anchor" href="#_2-2-获取cookie" aria-hidden="true">#</a> 2.2.获取cookie</h2><p>RabbitMQ底层依赖于Erlang，而Erlang虚拟机就是一个面向分布式的语言，默认就支持集群模式。集群模式中的每个RabbitMQ 节点使用 cookie 来确定它们是否被允许相互通信。</p><p>要使两个节点能够通信，它们必须具有相同的共享秘密，称为<strong>Erlang cookie</strong>。cookie 只是一串最多 255 个字符的字母数字字符。</p><p>每个集群节点必须具有<strong>相同的 cookie</strong>。实例之间也需要它来相互通信。</p><p>我们先在之前启动的mq容器中获取一个cookie值，作为集群的cookie。执行下面的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mq <span class="token function">cat</span> /var/lib/rabbitmq/.erlang.cookie
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到cookie值如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>FXZMCVGLBIXZCDEMMVZQ
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，停止并删除当前的mq容器，我们重新搭建集群。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> mq
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+g+`" alt="image-20210717212345165" tabindex="0" loading="lazy"><figcaption>image-20210717212345165</figcaption></figure><h2 id="_2-3-准备集群配置" tabindex="-1"><a class="header-anchor" href="#_2-3-准备集群配置" aria-hidden="true">#</a> 2.3.准备集群配置</h2><p>在/tmp目录新建一个配置文件 rabbitmq.conf：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /tmp
<span class="token comment"># 创建文件</span>
<span class="token function">touch</span> rabbitmq.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件内容如下：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code>loopback_users.guest = false
listeners.tcp.default = 5672
cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config
cluster_formation.classic_config.nodes.1 = rabbit@mq1
cluster_formation.classic_config.nodes.2 = rabbit@mq2
cluster_formation.classic_config.nodes.3 = rabbit@mq3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再创建一个文件，记录cookie</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /tmp
<span class="token comment"># 创建cookie文件</span>
<span class="token function">touch</span> .erlang.cookie
<span class="token comment"># 写入cookie</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;FXZMCVGLBIXZCDEMMVZQ&quot;</span> <span class="token operator">&gt;</span> .erlang.cookie
<span class="token comment"># 修改cookie文件的权限</span>
<span class="token function">chmod</span> <span class="token number">600</span> .erlang.cookie
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>准备三个目录,mq1、mq2、mq3：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /tmp
<span class="token comment"># 创建目录</span>
<span class="token function">mkdir</span> mq1 mq2 mq3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后拷贝rabbitmq.conf、cookie文件到mq1、mq2、mq3：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入/tmp</span>
<span class="token builtin class-name">cd</span> /tmp
<span class="token comment"># 拷贝</span>
<span class="token function">cp</span> rabbitmq.conf mq1
<span class="token function">cp</span> rabbitmq.conf mq2
<span class="token function">cp</span> rabbitmq.conf mq3
<span class="token function">cp</span> .erlang.cookie mq1
<span class="token function">cp</span> .erlang.cookie mq2
<span class="token function">cp</span> .erlang.cookie mq3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-4-启动集群" tabindex="-1"><a class="header-anchor" href="#_2-4-启动集群" aria-hidden="true">#</a> 2.4.启动集群</h2><p>创建一个网络：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network create mq-net
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>docker volume create</p><p>运行命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--net</span> mq-net <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/mq1/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>itcast <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span><span class="token number">123321</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> mq1 <span class="token punctuation">\\</span>
<span class="token parameter variable">--hostname</span> mq1 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8071</span>:5672 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8081</span>:15672 <span class="token punctuation">\\</span>
rabbitmq:3.8-management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--net</span> mq-net <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/mq2/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>itcast <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span><span class="token number">123321</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> mq2 <span class="token punctuation">\\</span>
<span class="token parameter variable">--hostname</span> mq2 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8072</span>:5672 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8082</span>:15672 <span class="token punctuation">\\</span>
rabbitmq:3.8-management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--net</span> mq-net <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/mq3/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>itcast <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span><span class="token number">123321</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> mq3 <span class="token punctuation">\\</span>
<span class="token parameter variable">--hostname</span> mq3 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8073</span>:5672 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8083</span>:15672 <span class="token punctuation">\\</span>
rabbitmq:3.8-management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-5-测试" tabindex="-1"><a class="header-anchor" href="#_2-5-测试" aria-hidden="true">#</a> 2.5.测试</h2><p>在mq1这个节点上添加一个队列：</p><figure><img src="`+v+'" alt="image-20210717222833196" tabindex="0" loading="lazy"><figcaption>image-20210717222833196</figcaption></figure><p>如图，在mq2和mq3两个控制台也都能看到：</p><figure><img src="'+h+'" alt="image-20210717223057902" tabindex="0" loading="lazy"><figcaption>image-20210717223057902</figcaption></figure><h3 id="_2-5-1-数据共享测试" tabindex="-1"><a class="header-anchor" href="#_2-5-1-数据共享测试" aria-hidden="true">#</a> 2.5.1.数据共享测试</h3><p>点击这个队列，进入管理页面：</p><figure><img src="'+q+'" alt="image-20210717223421750" tabindex="0" loading="lazy"><figcaption>image-20210717223421750</figcaption></figure><p>然后利用控制台发送一条消息到这个队列：</p><figure><img src="'+k+'" alt="image-20210717223320238" tabindex="0" loading="lazy"><figcaption>image-20210717223320238</figcaption></figure><p>结果在mq2、mq3上都能看到这条消息：</p><figure><img src="'+f+`" alt="image-20210717223603628" tabindex="0" loading="lazy"><figcaption>image-20210717223603628</figcaption></figure><h3 id="_2-5-2-可用性测试" tabindex="-1"><a class="header-anchor" href="#_2-5-2-可用性测试" aria-hidden="true">#</a> 2.5.2.可用性测试</h3><p>我们让其中一台节点mq1宕机：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop mq1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后登录mq2或mq3的控制台，发现simple.queue也不可用了：</p><figure><img src="`+_+'" alt="image-20210717223800203" tabindex="0" loading="lazy"><figcaption>image-20210717223800203</figcaption></figure><p>说明数据并没有拷贝到mq2和mq3。</p><h1 id="_4-镜像模式" tabindex="-1"><a class="header-anchor" href="#_4-镜像模式" aria-hidden="true">#</a> 4.镜像模式</h1><p>在刚刚的案例中，一旦创建队列的主机宕机，队列就会不可用。不具备高可用能力。如果要解决这个问题，必须使用官方提供的镜像集群方案。</p>',77),X={href:"https://www.rabbitmq.com/ha.html",target:"_blank",rel:"noopener noreferrer"},G=i(`<h2 id="_4-1-镜像模式的特征" tabindex="-1"><a class="header-anchor" href="#_4-1-镜像模式的特征" aria-hidden="true">#</a> 4.1.镜像模式的特征</h2><p>默认情况下，队列只保存在创建该队列的节点上。而镜像模式下，创建队列的节点被称为该队列的<strong>主节点</strong>，队列还会拷贝到集群中的其它节点，也叫做该队列的<strong>镜像</strong>节点。</p><p>但是，不同队列可以在集群中的任意节点上创建，因此不同队列的主节点可以不同。甚至，<strong>一个队列的主节点可能是另一个队列的镜像节点</strong>。</p><p>用户发送给队列的一切请求，例如发送消息、消息回执默认都会在主节点完成，如果是从节点接收到请求，也会路由到主节点去完成。<strong>镜像节点仅仅起到备份数据作用</strong>。</p><p>当主节点接收到消费者的ACK时，所有镜像都会删除节点中的数据。</p><p>总结如下：</p><ul><li>镜像队列结构是一主多从（从就是镜像）</li><li>所有操作都是主节点完成，然后同步给镜像节点</li><li>主宕机后，镜像节点会替代成新的主（如果在主从同步完成前，主就已经宕机，可能出现数据丢失）</li><li>不具备负载均衡功能，因为所有操作都会有主节点完成（但是不同队列，其主节点可以不同，可以利用这个提高吞吐量）</li></ul><h2 id="_4-2-镜像模式的配置" tabindex="-1"><a class="header-anchor" href="#_4-2-镜像模式的配置" aria-hidden="true">#</a> 4.2.镜像模式的配置</h2><p>镜像模式的配置有3种模式：</p><table><thead><tr><th style="text-align:left;">ha-mode</th><th style="text-align:left;">ha-params</th><th style="text-align:left;">效果</th></tr></thead><tbody><tr><td style="text-align:left;">准确模式exactly</td><td style="text-align:left;">队列的副本量count</td><td style="text-align:left;">集群中队列副本（主服务器和镜像服务器之和）的数量。count如果为1意味着单个副本：即队列主节点。count值为2表示2个副本：1个队列主和1个队列镜像。换句话说：count = 镜像数量 + 1。如果群集中的节点数少于count，则该队列将镜像到所有节点。如果有集群总数大于count+1，并且包含镜像的节点出现故障，则将在另一个节点上创建一个新的镜像。</td></tr><tr><td style="text-align:left;">all</td><td style="text-align:left;">(none)</td><td style="text-align:left;">队列在群集中的所有节点之间进行镜像。队列将镜像到任何新加入的节点。镜像到所有节点将对所有群集节点施加额外的压力，包括网络I / O，磁盘I / O和磁盘空间使用情况。推荐使用exactly，设置副本数为（N / 2 +1）。</td></tr><tr><td style="text-align:left;">nodes</td><td style="text-align:left;"><em>node names</em></td><td style="text-align:left;">指定队列创建到哪些节点，如果指定的节点全部不存在，则会出现异常。如果指定的节点在集群中存在，但是暂时不可用，会创建节点到当前客户端连接到的节点。</td></tr></tbody></table><p>这里我们以rabbitmqctl命令作为案例来讲解配置语法。</p><p>语法示例：</p><h3 id="_4-2-1-exactly模式" tabindex="-1"><a class="header-anchor" href="#_4-2-1-exactly模式" aria-hidden="true">#</a> 4.2.1.exactly模式</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rabbitmqctl set_policy ha-two &quot;^two\\.&quot; &#39;{&quot;ha-mode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:2,&quot;ha-sync-mode&quot;:&quot;automatic&quot;}&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>rabbitmqctl set_policy</code>：固定写法</li><li><code>ha-two</code>：策略名称，自定义</li><li><code>&quot;^two\\.&quot;</code>：匹配队列的正则表达式，符合命名规则的队列才生效，这里是任何以<code>two.</code>开头的队列名称</li><li><code>&#39;{&quot;ha-mode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:2,&quot;ha-sync-mode&quot;:&quot;automatic&quot;}&#39;</code>: 策略内容 <ul><li><code>&quot;ha-mode&quot;:&quot;exactly&quot;</code>：策略模式，此处是exactly模式，指定副本数量</li><li><code>&quot;ha-params&quot;:2</code>：策略参数，这里是2，就是副本数量为2，1主1镜像</li><li><code>&quot;ha-sync-mode&quot;:&quot;automatic&quot;</code>：同步策略，默认是manual，即新加入的镜像节点不会同步旧的消息。如果设置为automatic，则新加入的镜像节点会把主节点中所有消息都同步，会带来额外的网络开销</li></ul></li></ul><h3 id="_4-2-2-all模式" tabindex="-1"><a class="header-anchor" href="#_4-2-2-all模式" aria-hidden="true">#</a> 4.2.2.all模式</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rabbitmqctl set_policy ha-all &quot;^all\\.&quot; &#39;{&quot;ha-mode&quot;:&quot;all&quot;}&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>ha-all</code>：策略名称，自定义</li><li><code>&quot;^all\\.&quot;</code>：匹配所有以<code>all.</code>开头的队列名</li><li><code>&#39;{&quot;ha-mode&quot;:&quot;all&quot;}&#39;</code>：策略内容 <ul><li><code>&quot;ha-mode&quot;:&quot;all&quot;</code>：策略模式，此处是all模式，即所有节点都会称为镜像节点</li></ul></li></ul><h3 id="_4-2-3-nodes模式" tabindex="-1"><a class="header-anchor" href="#_4-2-3-nodes模式" aria-hidden="true">#</a> 4.2.3.nodes模式</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rabbitmqctl set_policy ha-nodes &quot;^nodes\\.&quot; &#39;{&quot;ha-mode&quot;:&quot;nodes&quot;,&quot;ha-params&quot;:[&quot;rabbit@nodeA&quot;, &quot;rabbit@nodeB&quot;]}&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>rabbitmqctl set_policy</code>：固定写法</li><li><code>ha-nodes</code>：策略名称，自定义</li><li><code>&quot;^nodes\\.&quot;</code>：匹配队列的正则表达式，符合命名规则的队列才生效，这里是任何以<code>nodes.</code>开头的队列名称</li><li><code>&#39;{&quot;ha-mode&quot;:&quot;nodes&quot;,&quot;ha-params&quot;:[&quot;rabbit@nodeA&quot;, &quot;rabbit@nodeB&quot;]}&#39;</code>: 策略内容 <ul><li><code>&quot;ha-mode&quot;:&quot;nodes&quot;</code>：策略模式，此处是nodes模式</li><li><code>&quot;ha-params&quot;:[&quot;rabbit@mq1&quot;, &quot;rabbit@mq2&quot;]</code>：策略参数，这里指定副本所在节点名称</li></ul></li></ul><h2 id="_4-3-测试" tabindex="-1"><a class="header-anchor" href="#_4-3-测试" aria-hidden="true">#</a> 4.3.测试</h2><p>我们使用exactly模式的镜像，因为集群节点数量为3，因此镜像数量就设置为2.</p><p>运行下面的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mq1 rabbitmqctl set_policy ha-two <span class="token string">&quot;^two\\.&quot;</span> <span class="token string">&#39;{&quot;ha-mode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:2,&quot;ha-sync-mode&quot;:&quot;automatic&quot;}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面，我们创建一个新的队列：</p><figure><img src="`+x+'" alt="image-20210717231751411" tabindex="0" loading="lazy"><figcaption>image-20210717231751411</figcaption></figure><p>在任意一个mq控制台查看队列：</p><figure><img src="'+y+'" alt="image-20210717231829505" tabindex="0" loading="lazy"><figcaption>image-20210717231829505</figcaption></figure><h3 id="_4-3-1-测试数据共享" tabindex="-1"><a class="header-anchor" href="#_4-3-1-测试数据共享" aria-hidden="true">#</a> 4.3.1.测试数据共享</h3><p>给two.queue发送一条消息：</p><figure><img src="'+M+'" alt="image-20210717231958996" tabindex="0" loading="lazy"><figcaption>image-20210717231958996</figcaption></figure><p>然后在mq1、mq2、mq3的任意控制台查看消息：</p><figure><img src="'+A+`" alt="image-20210717232108584" tabindex="0" loading="lazy"><figcaption>image-20210717232108584</figcaption></figure><h3 id="_4-3-2-测试高可用" tabindex="-1"><a class="header-anchor" href="#_4-3-2-测试高可用" aria-hidden="true">#</a> 4.3.2.测试高可用</h3><p>现在，我们让two.queue的主节点mq1宕机：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop mq1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看集群状态：</p><figure><img src="`+Q+'" alt="image-20210717232257420" tabindex="0" loading="lazy"><figcaption>image-20210717232257420</figcaption></figure><p>查看队列状态：</p><figure><img src="'+E+'" alt="image-20210717232322646" tabindex="0" loading="lazy"><figcaption>image-20210717232322646</figcaption></figure><p>发现依然是健康的！并且其主节点切换到了rabbit@mq2上</p><h1 id="_5-仲裁队列" tabindex="-1"><a class="header-anchor" href="#_5-仲裁队列" aria-hidden="true">#</a> 5.仲裁队列</h1><p>从RabbitMQ 3.8版本开始，引入了新的仲裁队列，他具备与镜像队里类似的功能，但使用更加方便。</p><h2 id="_5-1-添加仲裁队列" tabindex="-1"><a class="header-anchor" href="#_5-1-添加仲裁队列" aria-hidden="true">#</a> 5.1.添加仲裁队列</h2><p>在任意控制台添加一个队列，一定要选择队列类型为Quorum类型。</p><figure><img src="'+B+'" alt="image-20210717234329640" tabindex="0" loading="lazy"><figcaption>image-20210717234329640</figcaption></figure><p>在任意控制台查看队列：</p><figure><img src="'+R+`" alt="image-20210717234426209" tabindex="0" loading="lazy"><figcaption>image-20210717234426209</figcaption></figure><p>可以看到，仲裁队列的 + 2字样。代表这个队列有2个镜像节点。</p><p>因为仲裁队列默认的镜像数为5。如果你的集群有7个节点，那么镜像数肯定是5；而我们集群只有3个节点，因此镜像数量就是3.</p><h2 id="_5-2-测试" tabindex="-1"><a class="header-anchor" href="#_5-2-测试" aria-hidden="true">#</a> 5.2.测试</h2><p>可以参考对镜像集群的测试，效果是一样的。</p><h2 id="_5-3-集群扩容" tabindex="-1"><a class="header-anchor" href="#_5-3-集群扩容" aria-hidden="true">#</a> 5.3.集群扩容</h2><h3 id="_5-3-1-加入集群" tabindex="-1"><a class="header-anchor" href="#_5-3-1-加入集群" aria-hidden="true">#</a> 5.3.1.加入集群</h3><p>1）启动一个新的MQ容器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--net</span> mq-net <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>itcast <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span><span class="token number">123321</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> mq4 <span class="token punctuation">\\</span>
<span class="token parameter variable">--hostname</span> mq5 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8074</span>:15672 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8084</span>:15672 <span class="token punctuation">\\</span>
rabbitmq:3.8-management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）进入容器控制台：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mq4 <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3）停止mq进程</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl stop_app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4）重置RabbitMQ中的数据：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl reset
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>5）加入mq1：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl join_cluster rabbit@mq1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>6）再次启动mq进程</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl start_app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+D+`" alt="image-20210718001909492" tabindex="0" loading="lazy"><figcaption>image-20210718001909492</figcaption></figure><h3 id="_5-3-2-增加仲裁队列副本" tabindex="-1"><a class="header-anchor" href="#_5-3-2-增加仲裁队列副本" aria-hidden="true">#</a> 5.3.2.增加仲裁队列副本</h3><p>我们先查看下quorum.queue这个队列目前的副本情况，进入mq1容器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mq1 <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmq-queues quorum_status <span class="token string">&quot;quorum.queue&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果：</p><figure><img src="`+z+`" alt="image-20210718002118357" tabindex="0" loading="lazy"><figcaption>image-20210718002118357</figcaption></figure><p>现在，我们让mq4也加入进来：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmq-queues add_member <span class="token string">&quot;quorum.queue&quot;</span> <span class="token string">&quot;rabbit@mq4&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果：</p><figure><img src="`+w+`" alt="image-20210718002253226" tabindex="0" loading="lazy"><figcaption>image-20210718002253226</figcaption></figure><p>再次查看：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmq-queues quorum_status <span class="token string">&quot;quorum.queue&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+T+'" alt="image-20210718002342603" tabindex="0" loading="lazy"><figcaption>image-20210718002342603</figcaption></figure><p>查看控制台，发现quorum.queue的镜像数量也从原来的 +2 变成了 +3：</p><figure><img src="'+I+'" alt="image-20210718002422365" tabindex="0" loading="lazy"><figcaption>image-20210718002422365</figcaption></figure>',84);function O(j,H){const n=l("ExternalLinkIcon");return o(),r("div",null,[U,a("p",null,[e("官方的安装指南地址为："),a("a",F,[e("https://blog.rabbitmq.com/posts/2015/04/scheduling-messages-with-rabbitmq"),s(n)])]),L,P,C,a("p",null,[e("RabbitMQ有一个官方的插件社区，地址为："),a("a",V,[e("https://www.rabbitmq.com/community-plugins.html"),s(n)])]),W,$,a("p",null,[e("大家可以去对应的GitHub页面下载3.8.9版本的插件，地址为"),a("a",Z,[e("https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/tag/3.8.9这个对应RabbitMQ的3.8.5以上版本。"),s(n)])]),N,a("p",null,[e("官方文档地址："),a("a",X,[e("https://www.rabbitmq.com/ha.html"),s(n)])]),G])}const Y=t(S,[["render",O],["__file","RabbitMQ部署指南.html.vue"]]);export{Y as default};
