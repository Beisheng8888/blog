const e=JSON.parse('{"key":"v-9ed0f2e4","path":"/src/%E9%9D%A2%E8%AF%95%E4%B8%93%E9%A2%98/%E6%A1%86%E6%9E%B6%E7%AF%87.html","title":"框架篇","lang":"zh-CN","frontmatter":{"description":"框架篇 1. Spring refresh 流程 要求 掌握 refresh 的 12 个步骤 Spring refresh 概述 refresh 是 AbstractApplicationContext 中的一个方法，负责初始化 ApplicationContext 容器，容器必须调用 refresh 才能正常工作。它的内部主要会调用 12 个方法，我们把它们称为 refresh 的 12 个步骤： prepareRefresh obtainFreshBeanFactory prepareBeanFactory postProcessBeanFactory invokeBeanFactoryPostProcessors registerBeanPostProcessors initMessageSource initApplicationEventMulticaster onRefresh registerListeners finishBeanFactoryInitialization finishRefresh","head":[["meta",{"property":"og:url","content":"https://github.com/Beisheng8888/blog/src/%E9%9D%A2%E8%AF%95%E4%B8%93%E9%A2%98/%E6%A1%86%E6%9E%B6%E7%AF%87.html"}],["meta",{"property":"og:site_name","content":"冀辉的博客"}],["meta",{"property":"og:title","content":"框架篇"}],["meta",{"property":"og:description","content":"框架篇 1. Spring refresh 流程 要求 掌握 refresh 的 12 个步骤 Spring refresh 概述 refresh 是 AbstractApplicationContext 中的一个方法，负责初始化 ApplicationContext 容器，容器必须调用 refresh 才能正常工作。它的内部主要会调用 12 个方法，我们把它们称为 refresh 的 12 个步骤： prepareRefresh obtainFreshBeanFactory prepareBeanFactory postProcessBeanFactory invokeBeanFactoryPostProcessors registerBeanPostProcessors initMessageSource initApplicationEventMulticaster onRefresh registerListeners finishBeanFactoryInitialization finishRefresh"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-17T06:17:48.000Z"}],["meta",{"property":"article:author","content":"Mr.JH"}],["meta",{"property":"article:modified_time","content":"2023-07-17T06:17:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"框架篇\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-17T06:17:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.JH\\",\\"url\\":\\"https://github.com/Beisheng8888\\"}]}"]]},"headers":[{"level":2,"title":"1. Spring refresh 流程","slug":"_1-spring-refresh-流程","link":"#_1-spring-refresh-流程","children":[]},{"level":2,"title":"2. Spring bean 生命周期","slug":"_2-spring-bean-生命周期","link":"#_2-spring-bean-生命周期","children":[]},{"level":2,"title":"3. Spring bean 循环依赖","slug":"_3-spring-bean-循环依赖","link":"#_3-spring-bean-循环依赖","children":[{"level":3,"title":"解决 set 循环依赖的原理","slug":"解决-set-循环依赖的原理","link":"#解决-set-循环依赖的原理","children":[]}]},{"level":2,"title":"4. Spring 事务失效","slug":"_4-spring-事务失效","link":"#_4-spring-事务失效","children":[]},{"level":2,"title":"5. Spring MVC 执行流程","slug":"_5-spring-mvc-执行流程","link":"#_5-spring-mvc-执行流程","children":[]},{"level":2,"title":"6. Spring 注解","slug":"_6-spring-注解","link":"#_6-spring-注解","children":[]},{"level":2,"title":"7. SpringBoot 自动配置原理","slug":"_7-springboot-自动配置原理","link":"#_7-springboot-自动配置原理","children":[]},{"level":2,"title":"8. Spring 中的设计模式","slug":"_8-spring-中的设计模式","link":"#_8-spring-中的设计模式","children":[]}],"git":{"createdTime":1689574668000,"updatedTime":1689574668000,"contributors":[{"name":"北省","email":"jih6666@126.com","commits":1}]},"readingTime":{"minutes":26.35,"words":7904},"filePathRelative":"src/面试专题/框架篇.md","localizedDate":"2023年7月17日","excerpt":"<h1> 框架篇</h1>\\n<h2> 1. Spring refresh 流程</h2>\\n<p><strong>要求</strong></p>\\n<ul>\\n<li>掌握 refresh 的 12 个步骤</li>\\n</ul>\\n<p><strong>Spring refresh 概述</strong></p>\\n<p>refresh 是 AbstractApplicationContext 中的一个方法，负责初始化 ApplicationContext 容器，容器必须调用 refresh 才能正常工作。它的内部主要会调用 12 个方法，我们把它们称为 refresh 的 12 个步骤：</p>\\n<ol>\\n<li>\\n<p>prepareRefresh</p>\\n</li>\\n<li>\\n<p>obtainFreshBeanFactory</p>\\n</li>\\n<li>\\n<p>prepareBeanFactory</p>\\n</li>\\n<li>\\n<p>postProcessBeanFactory</p>\\n</li>\\n<li>\\n<p>invokeBeanFactoryPostProcessors</p>\\n</li>\\n<li>\\n<p>registerBeanPostProcessors</p>\\n</li>\\n<li>\\n<p>initMessageSource</p>\\n</li>\\n<li>\\n<p>initApplicationEventMulticaster</p>\\n</li>\\n<li>\\n<p>onRefresh</p>\\n</li>\\n<li>\\n<p>registerListeners</p>\\n</li>\\n<li>\\n<p>finishBeanFactoryInitialization</p>\\n</li>\\n<li>\\n<p>finishRefresh</p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
