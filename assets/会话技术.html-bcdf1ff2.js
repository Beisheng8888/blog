import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,b as s,d as i,e as a}from"./app-8c5f8b02.js";const l="/blog/assets/1629382713180-ce64c482.png",u="/blog/assets/1629383655260-d97cb92a.png",k="/blog/assets/1629383767654-c22ab7a9.png",r="/blog/assets/1629383921990-61f4ac48.png",d="/blog/assets/1629384004179-a2fac417.png",v="/blog/assets/1629386230207-b8ee818b.png",m="/blog/assets/1629389317463-99891da5.png",g="/blog/assets/1629390237936-2fbb29b9.png",b="/blog/assets/1629391020081-20b0b4d7.png",S="/blog/assets/1629391061140-ecb32351.png",f="/blog/assets/1629393289338-d0b3f0a8.png",x="/blog/assets/1629393428733-92742eb8.png",h="/blog/assets/1629393578667-fd6a02ef.png",q="/blog/assets/1629423321737-20a5f52e.png",y="/blog/assets/1629423629887-127796cd.png",w="/blog/assets/1629424844041-a4de48ea.png",C="/blog/assets/1629425945465-47db276c.png",_="/blog/assets/1629427173389-46d65cc7.png",H="/blog/assets/1629428292373-9b6229f4.png",R="/blog/assets/1629429063101-1e0277f4.png",E="/blog/assets/1629429239409-d87742b5.png",O="/blog/assets/1629429788264-0bdaa29a.png",j="/blog/assets/1629430754825-3152418b.png",I="/blog/assets/1629430891071-49bf1148.png",A="/blog/assets/1629431299195-ba25158b.png",z="/blog/assets/1629438984314-652dba86.png",T="/blog/assets/1629439800328-3177ab24.png",B="/blog/assets/1629439879596-bc1d4e15.png",P="/blog/assets/1629440018238-da910207.png",G="/blog/assets/1629440576828-3add6d8b.png",D="/blog/assets/1629441687613-39684c01.png",L="/blog/assets/1629441900843-b5194ef0.png",U={},W=a('<h1 id="会话技术" tabindex="-1"><a class="header-anchor" href="#会话技术" aria-hidden="true">#</a> 会话技术</h1><h2 id="_1-会话跟踪技术的概述" tabindex="-1"><a class="header-anchor" href="#_1-会话跟踪技术的概述" aria-hidden="true">#</a> 1，会话跟踪技术的概述</h2><p>对于<code>会话跟踪</code>这四个词，我们需要拆开来进行解释，首先要理解什么是<code>会话</code>，然后再去理解什么是<code>会话跟踪</code>:</p><ul><li><p>会话:用户打开浏览器，访问web服务器的资源，会话建立，直到有一方断开连接，会话结束。在一次会话中可以包含<mark>多次</mark>请求和响应。</p><ul><li>从浏览器发出请求到服务端响应数据给前端之后，一次会话(在浏览器和服务器之间)就被建立了</li><li>会话被建立后，如果浏览器或服务端都没有被关闭，则会话就会持续建立着</li><li>浏览器和服务器就可以继续使用该会话进行请求发送和响应，上述的整个过程就被称之为<mark>会话</mark>。</li></ul><p>用实际场景来理解下会话，比如在我们访问京东的时候，当打开浏览器进入京东首页后，浏览器和京东的服务器之间就建立了一次会话，后面的搜索商品,查看商品的详情,加入购物车等都是在这一次会话中完成。</p><p>思考:下图中总共建立了几个会话?</p><figure><img src="'+l+'" alt="1629382713180" tabindex="0" loading="lazy"><figcaption>1629382713180</figcaption></figure><p>每个浏览器都会与服务端建立了一个会话，加起来总共是<mark>3</mark>个会话。</p></li><li><p>会话跟踪:一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间<mark>共享数据</mark>。</p><ul><li>服务器会收到多个请求，这多个请求可能来自多个浏览器，如上图中的6个请求来自3个浏览器</li><li>服务器需要用来识别请求是否来自同一个浏览器</li><li>服务器用来识别浏览器的过程，这个过程就是<mark>会话跟踪</mark></li><li>服务器识别浏览器后就可以在同一个会话中多次请求之间来共享数据</li></ul><p>那么我们又有一个问题需要思考，一个会话中的多次请求为什么要共享数据呢?有了这个数据共享功能后能实现哪些功能呢?</p><ul><li><p>购物车: <code>加入购物车</code>和<code>去购物车结算</code>是两次请求，但是后面这次请求要想展示前一次请求所添加的商品，就需要用到数据共享。</p><figure><img src="'+u+'" alt="1629383655260" tabindex="0" loading="lazy"><figcaption>1629383655260</figcaption></figure></li><li><p>页面展示用户登录信息:很多网站，登录后访问多个功能发送多次请求后，浏览器上都会有当前登录用户的信息[用户名]，比如百度、京东、码云等。</p><figure><img src="'+k+'" alt="1629383767654" tabindex="0" loading="lazy"><figcaption>1629383767654</figcaption></figure></li><li><p>网站登录页面的<code>记住我</code>功能:当用户登录成功后，勾选<code>记住我</code>按钮后下次再登录的时候，网站就会自动填充用户名和密码，简化用户的登录操作，多次登录就会有多次请求，他们之间也涉及到共享数据</p><figure><img src="'+r+'" alt="1629383921990" tabindex="0" loading="lazy"><figcaption>1629383921990</figcaption></figure></li><li><p>登录页面的验证码功能:生成验证码和输入验证码点击注册这也是两次请求，这两次请求的数据之间要进行对比，相同则允许注册，不同则拒绝注册，该功能的实现也需要在同一次会话中共享数据。</p><figure><img src="'+d+'" alt="1629384004179" tabindex="0" loading="lazy"><figcaption>1629384004179</figcaption></figure></li></ul></li></ul><p>通过这几个例子的讲解，相信大家对<code>会话追踪</code>技术已经有了一定的理解，该技术在实际开发中也非常重要。那么接下来我们就需要去学习下<code>会话跟踪</code>技术，在学习这些技术之前，我们需要思考:为什么现在浏览器和服务器不支持数据共享呢?</p><ul><li>浏览器和服务器之间使用的是HTTP请求来进行数据传输</li><li>HTTP协议是<mark>无状态</mark>的，每次浏览器向服务器请求时，服务器都会将该请求视为<mark>新的</mark>请求</li><li>HTTP协议设计成无状态的目的是让每次请求之间相互独立，互不影响</li><li>请求与请求之间独立后，就无法实现多次请求之间的数据共享</li></ul><p>分析完具体的原因后，那么该如何实现会话跟踪技术呢? 具体的实现方式有:</p><p>(1)客户端会话跟踪技术：<mark>Cookie</mark></p><p>(2)服务端会话跟踪技术：<mark>Session</mark></p><p>这两个技术都可以实现会话跟踪，它们之间最大的区别:<mark>Cookie是存储在浏览器端而Session是存储在服务器端</mark></p><p>具体的学习思路为:</p><ul><li>CooKie的基本使用、原理、使用细节</li><li>Session的基本使用、原理、使用细节</li><li>Cookie和Session的综合案例</li></ul><p><strong>小结</strong></p><p>在这节中，我们主要介绍了下什么是会话和会话跟踪技术，需要注意的是:</p><ul><li>HTTP协议是无状态的，靠HTTP协议是无法实现会话跟踪</li><li>想要实现会话跟踪，就需要用到Cookie和Session</li></ul><p>这个Cookie和Session具体该如何使用，接下来就先从Cookie来学起。</p><h2 id="_2-cookie" tabindex="-1"><a class="header-anchor" href="#_2-cookie" aria-hidden="true">#</a> 2，Cookie</h2><p>学习Cookie，我们主要解决下面几个问题:</p><ul><li>什么是Cookie?</li><li>Cookie如何来使用?</li><li>Cookie是如何实现的?</li><li>Cookie的使用注意事项有哪些?</li></ul><h3 id="_2-1-cookie的基本使用" tabindex="-1"><a class="header-anchor" href="#_2-1-cookie的基本使用" aria-hidden="true">#</a> 2.1 Cookie的基本使用</h3><p><strong>1.概念</strong></p><p><mark>Cookie</mark>：客户端会话技术，将数据保存到客户端，以后每次请求都携带Cookie数据进行访问。</p><p><strong>2.Cookie的工作流程</strong></p><figure><img src="'+v+`" alt="1629386230207" tabindex="0" loading="lazy"><figcaption>1629386230207</figcaption></figure><ul><li>服务端提供了两个Servlet，分别是ServletA和ServletB</li><li>浏览器发送HTTP请求1给服务端，服务端ServletA接收请求并进行业务处理</li><li>服务端ServletA在处理的过程中可以创建一个Cookie对象并将<code>name=zs</code>的数据存入Cookie</li><li>服务端ServletA在响应数据的时候，会把Cookie对象响应给浏览器</li><li>浏览器接收到响应数据，会把Cookie对象中的数据存储在浏览器内存中，此时浏览器和服务端就<mark>建立了一次会话</mark></li><li><mark>在同一次会话</mark>中浏览器再次发送HTTP请求2给服务端ServletB，浏览器会携带Cookie对象中的所有数据</li><li>ServletB接收到请求和数据后，就可以获取到存储在Cookie对象中的数据，这样同一个会话中的多次请求之间就实现了数据共享</li></ul><p><strong>3.Cookie的基本使用</strong></p><p>对于Cookie的使用，我们更关注的应该是后台代码如何操作Cookie，对于Cookie的操作主要分两大类，本别是<mark>发送Cookie</mark>和<mark>获取Cookie</mark>,对于上面这两块内容，分别该如何实现呢?</p><p>3.1 发送Cookie</p><ul><li>创建Cookie对象，并设置数据</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Cookie cookie = new Cookie(&quot;key&quot;,&quot;value&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>发送Cookie到客户端：使用<mark>response</mark>对象</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>response.addCookie(cookie);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>介绍完发送Cookie对应的步骤后，接下面通过一个案例来完成Cookie的发送，具体实现步骤为:</p><blockquote><p>需求:在Servlet中生成Cookie对象并存入数据，然后将数据发送给浏览器</p><p>1.创建Maven项目,项目名称为cookie-demo，并在pom.xml添加依赖</p><p>2.编写Servlet类，名称为AServlet</p><p>3.在AServlet中创建Cookie对象，存入数据，发送给前端</p><p>4.启动测试，在浏览器查看Cookie对象中的值</p></blockquote><p>(1)创建Maven项目cookie-demo，并在pom.xml添加依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--servlet--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--jsp--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--jstl--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>taglibs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>standard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(2)编写Servlet类，名称为AServlet</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/aServlet&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(3)在Servlet中创建Cookie对象，存入数据，发送给前端</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/aServlet&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//发送Cookie</span>
        <span class="token comment">//1. 创建Cookie对象</span>
        <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;zs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2. 发送Cookie，response</span>
        response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）启动测试，在浏览器查看Cookie对象中的值</p><p>访问<code>http://localhost:8080/cookie-demo/aServlet</code></p><p>chrome浏览器查看Cookie的值，有两种方式,分布式:</p><p>方式一:</p><figure><img src="`+m+'" alt="1629389317463" tabindex="0" loading="lazy"><figcaption>1629389317463</figcaption></figure><p>方式二:选中打开开发者工具或者 使用快捷键F12 或者 Ctrl+Shift+I</p><figure><img src="'+g+`" alt="1629390237936" tabindex="0" loading="lazy"><figcaption>1629390237936</figcaption></figure><p>3.2 获取Cookie</p><ul><li>获取客户端携带的所有Cookie，使用<mark>request</mark>对象</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Cookie[] cookies = request.getCookies();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>遍历数组，获取每一个Cookie对象：for</li><li>使用Cookie对象方法获取数据</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cookie.getName();
cookie.getValue();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>介绍完获取Cookie对应的步骤后，接下面再通过一个案例来完成Cookie的获取，具体实现步骤为:</p><blockquote><p>需求:在Servlet中获取前一个案例存入在Cookie对象中的数据</p><p>1.编写一个新Servlet类，名称为BServlet</p><p>2.在BServlet中使用request对象获取Cookie数组，遍历数组，从数据中获取指定名称对应的值</p><p>3.启动测试，在控制台打印出获取的值</p></blockquote><p>(1)编写一个新Servlet类，名称为BServlet</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/bServlet&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）在BServlet中使用request对象获取Cookie数组，遍历数组，从数据中获取指定名称对应的值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/bServlet&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取Cookie</span>
        <span class="token comment">//1. 获取Cookie数组</span>
        <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2. 遍历数组</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span> cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//3. 获取数据</span>
            <span class="token class-name">String</span> name <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">String</span> value <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">&quot;:&quot;</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）启动测试，在控制台打印出获取的值</p><p>访问<code>http://localhost:8080/cookie-demo/bServlet</code></p><figure><img src="`+b+'" alt="1629391020081" tabindex="0" loading="lazy"><figcaption>1629391020081</figcaption></figure><p>在IDEA控制台就能看到输出的结果:</p><figure><img src="'+S+'" alt="1629391061140" tabindex="0" loading="lazy"><figcaption>1629391061140</figcaption></figure><p>==思考:==测试的时候</p><ul><li>在访问AServlet和BServlet的中间把关闭浏览器,重启浏览器后访问BServlet能否获取到Cookie中的数据?</li></ul><p>这个问题，我们会在Cookie的使用细节中讲，大家可以动手先试下。</p><p><strong>小结</strong></p><p>在这节中，我们主要讲解了Cookie的基本使用,包含两部分内容</p><ul><li>发送Cookie: <ul><li>创建Cookie对象，并设置值:Cookie cookie = new Cookie(&quot;key&quot;,&quot;value&quot;);</li><li>发送Cookie到客户端使用的是Reponse对象:response.addCookie(cookie);</li></ul></li><li>获取Cookie: <ul><li>使用Request对象获取Cookie数组:Cookie[] cookies = request.getCookies();</li><li>遍历数组</li><li>获取数组中每个Cookie对象的值:cookie.getName()和cookie.getValue()</li></ul></li></ul><p>介绍完Cookie的基本使用之后，那么Cookie的底层到底是如何实现一次会话两次请求之间的数据共享呢?</p><h3 id="_2-2-cookie的原理分析" tabindex="-1"><a class="header-anchor" href="#_2-2-cookie的原理分析" aria-hidden="true">#</a> 2.2 Cookie的原理分析</h3><p>对于Cookie的实现原理是基于HTTP协议的,其中设计到HTTP协议中的两个请求头信息:</p><ul><li>响应头:set-cookie</li><li>请求头: cookie</li></ul><figure><img src="'+f+'" alt="1629393289338" tabindex="0" loading="lazy"><figcaption>1629393289338</figcaption></figure><ul><li>前面的案例中已经能够实现，AServlet给前端发送Cookie,BServlet从request中获取Cookie的功能</li><li>对于AServlet响应数据的时候，Tomcat服务器都是基于HTTP协议来响应数据</li><li>当Tomcat发现后端要返回的是一个Cookie对象之后，Tomcat就会在响应头中添加一行数据==<code>Set-Cookie:username=zs</code>==</li><li>浏览器获取到响应结果后，从响应头中就可以获取到<code>Set-Cookie</code>对应值<code>username=zs</code>,并将数据存储在浏览器的内存中</li><li>浏览器再次发送请求给BServlet的时候，浏览器会自动在请求头中添加==<code>Cookie: username=zs</code>==发送给服务端BServlet</li><li>Request对象会把请求头中cookie对应的值封装成一个个Cookie对象，最终形成一个数组</li><li>BServlet通过Request对象获取到Cookie[]后，就可以从中获取自己需要的数据</li></ul><p>接下来，使用刚才的案例，把上述结论验证下:</p><p>(1)访问AServlet对应的地址<code>http://localhost:8080/cookie-demo/aServlet</code></p><p>使用Chrom浏览器打开开发者工具(F12或Crtl+Shift+I)进行查看<mark>响应头</mark>中的数据</p><figure><img src="'+x+'" alt="1629393428733" tabindex="0" loading="lazy"><figcaption>1629393428733</figcaption></figure>',79),N={href:"http://localhost:8080/cookie-demo/bServlet",target:"_blank",rel:"noopener noreferrer"},M=a('<p>使用Chrom浏览器打开开发者工具(F12或Crtl+Shift+I)进行查看<mark>请求头</mark>中的数据</p><figure><img src="'+h+'" alt="1629393578667" tabindex="0" loading="lazy"><figcaption>1629393578667</figcaption></figure><h3 id="_2-3-cookie的使用细节" tabindex="-1"><a class="header-anchor" href="#_2-3-cookie的使用细节" aria-hidden="true">#</a> 2.3 Cookie的使用细节</h3><p>在这节我们主要讲解两个知识，第一个是Cookie的存活时间，第二个是Cookie如何存储中文，首先来学习下Cookie的存活时间。</p><h4 id="_2-3-1-cookie的存活时间" tabindex="-1"><a class="header-anchor" href="#_2-3-1-cookie的存活时间" aria-hidden="true">#</a> 2.3.1 Cookie的存活时间</h4><p>前面让大家思考过一个问题:</p><figure><img src="'+q+'" alt="1629423321737" tabindex="0" loading="lazy"><figcaption>1629423321737</figcaption></figure><p>(1)浏览器发送请求给AServlet,AServlet会响应一个存有<code>usernanme=zs</code>的Cookie对象给浏览器</p><p>(2)浏览器接收到响应数据将cookie存入到浏览器内存中</p><p>(3)当浏览器再次发送请求给BServlet,BServlet就可以使用Request对象获取到Cookie数据</p><p>(4)在发送请求到BServlet之前，如果把浏览器关闭再打开进行访问，BServlet能否获取到Cookie数据?</p><p><mark>注意：浏览器关闭再打开不是指打开一个新的选显卡，而且必须是先关闭再打开，顺序不能变。</mark></p><p>针对上面这个问题，通过演示，会发现，BServlet中无法再获取到Cookie数据，这是为什么呢?</p><ul><li>默认情况下，Cookie存储在浏览器内存中，当浏览器关闭，内存释放，则Cookie被销毁</li></ul><p>这个结论就印证了上面的演示效果，但是如果使用这种默认情况下的Cookie,有些需求就无法实现，比如:</p><figure><img src="'+y+`" alt="1629423629887" tabindex="0" loading="lazy"><figcaption>1629423629887</figcaption></figure><p>上面这个网站的登录页面上有一个<code>记住我</code>的功能，这个功能大家都比较熟悉</p><ul><li>第一次输入用户名和密码并勾选<code>记住我</code>然后进行登录</li><li>下次再登陆的时候，用户名和密码就会被自动填充，不需要再重新输入登录</li><li>比如<code>记住我</code>这个功能需要记住用户名和密码一个星期，那么使用默认情况下的Cookie就会出现问题</li><li>因为默认情况，浏览器一关，Cookie就会从浏览器内存中删除，对于<code>记住我</code>功能就无法实现</li></ul><p>所以我们现在就遇到一个难题是如何将Cookie持久化存储?</p><p>Cookie其实已经为我们提供好了对应的API来完成这件事，这个API就是<mark>setMaxAge</mark>,</p><ul><li>设置Cookie存活时间</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>setMaxAge(int seconds)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数值为:</p><p>1.正数：将Cookie写入浏览器所在电脑的硬盘，持久化存储。到时间自动删除</p><p>2.负数：默认值，Cookie在当前浏览器内存中，当浏览器关闭，则Cookie被销毁</p><p>3.零：删除对应Cookie. 如果设置为0，想删除某个cookie，则必须保证cookie以下属性一致。path、domain、name</p><p>接下来，咱们就在AServlet中去设置Cookie的存活时间。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/aServlet&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//发送Cookie</span>
        <span class="token comment">//1. 创建Cookie对象</span>
        <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;zs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置存活时间   ，1周 7天</span>
        cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//易阅读，需程序计算</span>
		<span class="token comment">//cookie.setMaxAge(604800); //不易阅读(可以使用注解弥补)，程序少进行一次计算</span>
        <span class="token comment">//2. 发送Cookie，response</span>
        response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改完代码后，启动测试，访问<code>http://localhost:8080/cookie-demo/aServlet</code></p><ul><li>访问一个AServlet后，把浏览器关闭重启后，再去访问<code>http://localhost:8080/cookie-demo/bServet</code>,能在控制台打印出<code>username:zs</code>,说明Cookie没有随着浏览器关闭而被销毁</li><li>通过浏览器查看Cookie的内容，会发现Cookie的相关信息</li></ul><figure><img src="`+w+`" alt="1629424844041" tabindex="0" loading="lazy"><figcaption>1629424844041</figcaption></figure><h4 id="_2-3-2-cookie存储中文" tabindex="-1"><a class="header-anchor" href="#_2-3-2-cookie存储中文" aria-hidden="true">#</a> 2.3.2 Cookie存储中文</h4><p>首先，先来演示一个效果，将之前<code>username=zs</code>的值改成<code>username=张三</code>，把汉字<code>张三</code>存入到Cookie中，看是什么效果:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/aServlet&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
 		<span class="token comment">//发送Cookie</span>
        <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置存活时间   ，1周 7天</span>
        cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2. 发送Cookie，response</span>
        response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动访问测试，访问<code>http://localhost:8080/cookie-demo/aServlet</code>会发现浏览器会提示错误信息</p><figure><img src="`+C+`" alt="1629425945465" tabindex="0" loading="lazy"><figcaption>1629425945465</figcaption></figure><p>通过上面的案例演示，我们得到一个结论:</p><ul><li>Cookie不能直接存储中文</li></ul><p>Cookie不能存储中文，但是如果有这方面的需求，这个时候该如何解决呢?</p><p>这个时候，我们可以使用之前学过的一个知识点叫<code>URL编码</code>，所以如果需要存储中文，就需要进行转码，具体的实现思路为:</p><blockquote><p>1.在AServlet中对中文进行URL编码，采用URLEncoder.encode()，将编码后的值存入Cookie中</p><p>2.在BServlet中获取Cookie中的值,获取的值为URL编码后的值</p><p>3.将获取的值在进行URL解码,采用URLDecoder.decode()，就可以获取到对应的中文值</p></blockquote><p>(1)在AServlet中对中文进行URL编码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/aServlet&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//发送Cookie</span>
        <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//对中文进行URL编码</span>
        value <span class="token operator">=</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;存储数据：&quot;</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将编码后的值存入Cookie中</span>
        <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置存活时间   ，1周 7天</span>
        cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2. 发送Cookie，response</span>
        response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(2)在BServlet中获取值，并对值进行解码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/bServlet&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取Cookie</span>
        <span class="token comment">//1. 获取Cookie数组</span>
        <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2. 遍历数组</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span> cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//3. 获取数据</span>
            <span class="token class-name">String</span> name <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">String</span> value <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取的是URL编码后的值 %E5%BC%A0%E4%B8%89</span>
                <span class="token comment">//URL解码</span>
                value <span class="token operator">=</span> <span class="token class-name">URLDecoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">&quot;:&quot;</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//value解码后为 张三</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，我们就可以将中文存入Cookie中进行使用。</p><p><strong>小结</strong></p><p>Cookie的使用细节中，我们讲了Cookie的<code>存活时间</code>和<code>存储中文</code>:</p><ul><li>存活时间，需要掌握setMaxAage()API的使用</li><li>存储中文，需要掌握URL编码和解码的使用</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 想要删除一个已经保存的cookie，要先创建一个cookie，设置其name、path、domain和要删除的cookie都一致，然后设置其maxAge为0，把此cookie覆盖设置到浏览器。</span>

<span class="token class-name">Cookie</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cookie<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 有效路径，只有当前请求的路径和一个cookie的path匹配时，cookie才会被浏览器自动携带。path在没有手动设置的时候有默认设置规则。以当前的请求路径的最后一个目录为准。例如：如果访问http://localhost:8080/cookie-demo/aaa/bbb/ccc/ServletDemo  路径，在这个servlet中响应设置了一个cookie，此cookie的默认path为/cookie-demo/aaa/bbb/ccc。如果下一次发请求时，url在这个目录中，cookie就会携带。否则cookie不携带。</span>
<span class="token comment">// http://localhost:8080/cookie-demo/aaa/ddd/ServleltDemo2,此时cookie不携带。</span>
<span class="token comment">// http://localhost:8080/cookie-demo/aaa/bbb/ccc/eee/xxxxServlet，此时cookie携带</span>
<span class="token comment">// 通常我们会把path设置为项目的虚拟目录。</span>
c<span class="token punctuation">.</span><span class="token function">setDomain</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置cookie的有效域名，通常不设置，代表默认域名，就是设置cookie时访问的域名。只有访问的域名和cookie的域名一致时才会自动携带cookie。如果有服务集群的时候，一半会设置。例如：c.setDomain(&quot;.baidu.com&quot;);</span>
c<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-session" tabindex="-1"><a class="header-anchor" href="#_3-session" aria-hidden="true">#</a> 3，Session</h2><p>Cookie已经能完成一次会话多次请求之间的数据共享，之前我们还提到过Session也可以实现，那么:</p><ul><li>什么是Session?</li><li>Session如何来使用?</li><li>Session是如何实现的?</li><li>Session的使用注意事项有哪些?</li></ul><h3 id="_3-1-session的基本使用" tabindex="-1"><a class="header-anchor" href="#_3-1-session的基本使用" aria-hidden="true">#</a> 3.1 Session的基本使用</h3><p><strong>1.概念</strong></p><p><mark>Session</mark>：服务端会话跟踪技术：将数据保存到服务端。</p><ul><li>Session是存储在服务端而Cookie是存储在客户端</li><li>存储在客户端的数据容易被窃取和截获，存在很多不安全的因素</li><li>存储在服务端的数据相比于客户端来说就更安全</li></ul><p><strong>2.Session的工作流程</strong></p><figure><img src="`+_+`" alt="1629427173389" tabindex="0" loading="lazy"><figcaption>1629427173389</figcaption></figure><ul><li>在服务端的AServlet获取一个Session对象，把数据存入其中</li><li>在服务端的BServlet获取到相同的Session对象，从中取出数据</li><li>就可以实现一次会话中多次请求之间的数据共享了</li><li>现在最大的问题是如何保证AServlet和BServlet使用的是同一个Session对象(在原理分析会讲解)?</li></ul><p><strong>3.Session的基本使用</strong></p><p>在JavaEE中提供了HttpSession接口，来实现一次会话的多次请求之间数据共享功能。</p><p>具体的使用步骤为:</p><ul><li>获取Session对象,使用的是request对象</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>HttpSession session = request.getSession();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>Session对象提供的功能:</p><ul><li><p>存储数据到 session 域中</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>void setAttribute(String name, Object o)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>根据 key，获取值</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Object getAttribute(String name)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>根据 key，删除该键值对</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>void removeAttribute(String name)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul><p>介绍完Session相关的API后，接下来通过一个案例来完成对Session的使用，具体实现步骤为:</p><blockquote><p>需求:在一个Servlet中往Session中存入数据，在另一个Servlet中获取Session中存入的数据</p><p>1.创建名为SessionDemo1的Servlet类</p><p>2.创建名为SessionDemo2的Servlet类</p><p>3.在SessionDemo1的方法中:获取Session对象、存储数据</p><p>4.在SessionDemo2的方法中:获取Session对象、获取数据</p><p>5.启动测试</p></blockquote><p>(1)创建名为SessionDemo1的Servlet类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/demo1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(2)创建名为SessionDemo2的Servlet类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/demo2&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionDemo2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(3)SessionDemo1:获取Session对象、存储数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/demo1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    	<span class="token comment">//存储到Session中</span>
        <span class="token comment">//1. 获取Session对象</span>
        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2. 存储数据</span>
        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;zs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(4)SessionDemo2:获取Session对象、获取数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/demo2&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionDemo2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取数据，从session中</span>
        <span class="token comment">//1. 获取Session对象</span>
        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2. 获取数据</span>
        <span class="token class-name">Object</span> username <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(5)启动测试，</p><ul><li>先访问<code>http://localhost:8080/cookie-demo/demo1</code>,将数据存入Session</li><li>在访问<code>http://localhost:8080/cookie-demo/demo2</code>,从Session中获取数据</li><li>查看控制台</li></ul><figure><img src="`+H+`" alt="1629428292373" tabindex="0" loading="lazy"><figcaption>1629428292373</figcaption></figure><p>通过案例的效果，能看到Session是能够在一次会话中两次请求之间共享数据。</p><p><strong>小结</strong></p><p>至此Session的基本使用就已经完成了，重点要掌握的是:</p><ul><li><p>Session的获取</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>HttpSession session = request.getSession();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Session常用方法的使用</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>void setAttribute(String name, Object o)
Object getAttribute(String name)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>**注意:**Session中可以存储的是一个Object类型的数据，也就是说Session中可以存储任意数据类型。</p></li></ul><p>介绍完Session的基本使用之后，那么Session的底层到底是如何实现一次会话两次请求之间的数据共享呢?</p><h3 id="_3-2-session的原理分析" tabindex="-1"><a class="header-anchor" href="#_3-2-session的原理分析" aria-hidden="true">#</a> 3.2 Session的原理分析</h3><ul><li>Session是基于Cookie实现的</li></ul><p>这句话其实不太能详细的说明Session的底层实现，接下来，咱们一步步来分析下Session的具体实现原理:</p><p>(1)前提条件</p><figure><img src="`+R+`" alt="1629429063101" tabindex="0" loading="lazy"><figcaption>1629429063101</figcaption></figure><p>Session要想实现一次会话多次请求之间的数据共享，就必须要保证多次请求获取Session的对象是同一个。</p><p>那么它们是一个对象么？要验证这个结论也很简单，只需要在上面案例中的两个Servlet中分别打印下Session对象</p><p>SessionDemo1</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/demo1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    	<span class="token comment">//存储到Session中</span>
        <span class="token comment">//1. 获取Session对象</span>
        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2. 存储数据</span>
        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;zs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SessionDemo2</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/demo2&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionDemo2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取数据，从session中</span>
        <span class="token comment">//1. 获取Session对象</span>
        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2. 获取数据</span>
        <span class="token class-name">Object</span> username <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动测试，分别访问</p><p><code>http://localhost:8080/cookie-demo/demo1</code></p><p><code>http://localhost:8080/cookie-demo/demo2</code></p><figure><img src="`+E+'" alt="1629429239409" tabindex="0" loading="lazy"><figcaption>1629429239409</figcaption></figure><p>通过打印可以得到如下结论:</p><ul><li>两个Servlet类中获取的Session对象是同一个</li><li>把demo1和demo2请求刷新多次，控制台最终打印的结果都是同一个</li></ul><p>那么问题又来了，如果新开一个浏览器，访问demo1或者demo2,打印在控制台的Session还是同一个对象么?</p><figure><img src="'+O+'" alt="1629429788264" tabindex="0" loading="lazy"><figcaption>1629429788264</figcaption></figure><p><mark>注意:在一台电脑上演示的时候，如果是相同的浏览器必须要把浏览器全部关掉重新打开，才算新开的一个浏览器。</mark></p><p>当然也可以使用不同的浏览器进行测试，就不需要把之前的浏览器全部关闭。</p><p>测试的结果：如果是不同浏览器或者重新打开浏览器后，打印的Session就不一样了。</p><p>所以Session实现的也是一次会话中的多次请求之间的数据共享。</p><p>那么最主要的问题就来了，Session是如何保证在一次会话中获取的Session对象是同一个呢?</p><figure><img src="'+j+'" alt="1629430754825" tabindex="0" loading="lazy"><figcaption>1629430754825</figcaption></figure><p>(1)demo1在第一次获取session对象的时候，session对象会有一个唯一的标识，假如是<code>id:10</code></p><p>(2)demo1在session中存入其他数据并处理完成所有业务后，需要通过Tomcat服务器响应结果给浏览器</p><p>(3)Tomcat服务器发现业务处理中使用了session对象，就会把session的唯一标识<code>id:10</code>当做一个cookie，添加<code>Set-Cookie:JESSIONID=10</code>到响应头中，并响应给浏览器</p><p>(4)浏览器接收到响应结果后，会把响应头中的coookie数据存储到浏览器的内存中</p><p>(5)浏览器在同一会话中访问demo2的时候，会把cookie中的数据按照<code>cookie: JESSIONID=10</code>的格式添加到请求头中并发送给服务器Tomcat</p><p>(6)demo2获取到请求后，从请求头中就读取cookie中的JSESSIONID值为10，然后就会到服务器内存中寻找<code>id:10</code>的session对象，如果找到了，就直接返回该对象，如果没有则新创建一个session对象</p><p>(7)关闭打开浏览器后，因为浏览器的cookie已被销毁，所以就没有JESSIONID的数据，服务端获取到的session就是一个全新的session对象</p><p>至此，<code>Session是基于Cookie来实现的</code>这就话，我们就解释完了，接下来通过实例来演示下:</p><p>(1)使用chrome浏览器访问<code>http://localhost:8080/cookie-demo/demo1</code>,打开开发者模式(F12或Ctrl+Shift+I),查看==响应头(Response Headers)==数据:</p><figure><img src="'+I+'" alt="1629430891071" tabindex="0" loading="lazy"><figcaption>1629430891071</figcaption></figure><p>(2)使用chrome浏览器再次访问<code>http://localhost:8080/cookie-demo/demo2</code>，查看==请求头(Request Headers)==数据:</p><figure><img src="'+A+'" alt="1629431299195" tabindex="0" loading="lazy"><figcaption>1629431299195</figcaption></figure><p><strong>小结</strong></p><p>介绍完Session的原理，我们只需要记住</p><ul><li>Session是基于Cookie来实现的</li></ul><h3 id="_3-3-session的使用细节" tabindex="-1"><a class="header-anchor" href="#_3-3-session的使用细节" aria-hidden="true">#</a> 3.3 Session的使用细节</h3><p>这节我们会主要讲解两个知识，第一个是Session的钝化和活化，第二个是Session的销毁，首先来学习什么是Session的钝化和活化？</p><h4 id="_3-3-1-session钝化与活化" tabindex="-1"><a class="header-anchor" href="#_3-3-1-session钝化与活化" aria-hidden="true">#</a> 3.3.1 Session钝化与活化</h4><p>首先需要大家思考的问题是:</p><ul><li>服务器重启后，Session中的数据是否还在?</li></ul><p>要想回答这个问题，我们可以先看下下面这幅图，</p><figure><img src="'+z+'" alt="1629438984314" tabindex="0" loading="lazy"><figcaption>1629438984314</figcaption></figure><p>(1)服务器端AServlet和BServlet共用的session对象应该是存储在服务器的内存中</p><p>(2)服务器重新启动后，内存中的数据应该是已经被释放，对象也应该都销毁了</p><p>所以session数据应该也已经不存在了。但是如果session不存在会引发什么问题呢?</p><p>举个例子说明下，</p><p>(1)用户把需要购买的商品添加到购物车，因为要实现同一个会话多次请求数据共享，所以假设把数据存入Session对象中</p><p>(2)用户正要付钱的时候接到一个电话，付钱的动作就搁浅了</p><p>(3)正在用户打电话的时候，购物网站因为某些原因需要重启</p><p>(4)重启后session数据被销毁，购物车中的商品信息也就会随之而消失</p><p>(5)用户想再次发起支付，就会出为问题</p><p>所以说对于session的数据，我们应该做到就算服务器重启了，也应该能把数据保存下来才对。</p><p>分析了这么多，那么Tomcat服务器在重启的时候，session数据到底会不会保存以及是如何保存的，我们可以通过实际案例来演示下:</p><p><mark>注意:这里所说的关闭和启动应该要确保是正常的关闭和启动。</mark></p><p>那如何才是正常关闭Tomcat服务器呢?</p><p>需要使用命令行的方式来启动和停止Tomcat服务器:</p><p><mark>启动</mark>:进入到项目pom.xml所在目录，执行<code>tomcat7:run</code></p><figure><img src="'+T+'" alt="1629439800328" tabindex="0" loading="lazy"><figcaption>1629439800328</figcaption></figure><p><mark>停止</mark>:在启动的命令行界面，输入<code>ctrl+c</code></p><figure><img src="'+B+'" alt="1629439879596" tabindex="0" loading="lazy"><figcaption>1629439879596</figcaption></figure><p>有了上述两个正常启动和关闭的方式后，接下来的测试流程是:</p><p>(1)先启动Tomcat服务器</p><p>(2)访问<code>http://localhost:8080/cookie-demo/demo1</code>将数据存入session中</p><p>(3)正确停止Tomcat服务器</p><p>(4)再次重新启动Tomcat服务器</p><p>(5)访问<code>http://localhost:8080/cookie-demo/demo2</code> 查看是否能获取到session中的数据</p><figure><img src="'+P+'" alt="1629440018238" tabindex="0" loading="lazy"><figcaption>1629440018238</figcaption></figure><p>经过测试，会发现只要服务器是正常关闭和启动，session中的数据是可以被保存下来的。</p><p>那么Tomcat服务器到底是如何做到的呢?</p><p>具体的原因就是:Session的钝化和活化:</p><ul><li><p>钝化：在服务器正常关闭后，Tomcat会自动将Session数据写入硬盘的文件中</p><ul><li><p>钝化的数据路径为:<code>项目目录\\target\\tomcat\\work\\Tomcat\\localhost\\项目名称\\SESSIONS.ser</code></p><figure><img src="'+G+`" alt="1629440576828" tabindex="0" loading="lazy"><figcaption>1629440576828</figcaption></figure></li></ul></li><li><p>活化：再次启动服务器后，从文件中加载数据到Session中</p><ul><li>数据加载到Session中后，路径中的<code>SESSIONS.ser</code>文件会被删除掉</li></ul></li></ul><p>对于上述的整个过程，大家只需要了解下即可。因为所有的过程都是Tomcat自己完成的，不需要我们参与。</p><p><strong>小结</strong></p><p>Session的钝化和活化介绍完后，需要我们注意的是:</p><ul><li>session数据存储在服务端，服务器重启后，session数据会被保存</li><li>浏览器被关闭启动后，重新建立的连接就已经是一个全新的会话，获取的session数据也是一个新的对象</li><li>session的数据要想共享，浏览器不能关闭，所以session数据不能长期保存数据</li><li>cookie是存储在客户端，是可以长期保存</li></ul><blockquote><p>session中可以存储任意类型的对象，如果我们存入了自定义类型的对象，想要让session在钝化和活化的时候把存储的对象也同时进行存储和还原，此时我们的对象必须实现序列化接口。</p></blockquote><h4 id="_3-3-2-session销毁" tabindex="-1"><a class="header-anchor" href="#_3-3-2-session销毁" aria-hidden="true">#</a> 3.3.2 Session销毁</h4><p>session的销毁会有两种方式:</p><ul><li><p>默认情况下，无操作，30分钟自动销毁</p><ul><li><p>对于这个失效时间，是可以通过配置进行修改的</p><ul><li><p>在项目的web.xml中配置</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3.1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">&gt;</span></span>100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果没有配置，默认是30分钟，默认值是在Tomcat的web.xml配置文件中写死的</p><figure><img src="`+D+`" alt="1629441687613" tabindex="0" loading="lazy"><figcaption>1629441687613</figcaption></figure></li></ul></li></ul></li><li><p>调用Session对象的invalidate()进行销毁</p><ul><li><p>在SessionDemo2类中添加session销毁的方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/demo2&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionDemo2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取数据，从session中</span>

        <span class="token comment">//1. 获取Session对象</span>
        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 销毁</span>
        session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2. 获取数据</span>
        <span class="token class-name">Object</span> username <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>启动访问测试，先访问demo1将数据存入到session，再次访问demo2从session中获取数据</p><figure><img src="`+L+'" alt="1629441900843" tabindex="0" loading="lazy"><figcaption>1629441900843</figcaption></figure></li><li><p>该销毁方法一般会在用户退出的时候，需要将session销毁掉。</p></li></ul></li></ul><p><strong>Cookie和Session小结</strong></p><ul><li>Cookie 和 Session 都是来完成一次会话内多次请求间<mark>数据共享</mark>的。</li></ul><p>所需两个对象放在一块，就需要思考:</p><p>Cookie和Session的区别是什么?</p><p>Cookie和Session的应用场景分别是什么?</p><ul><li>区别: <ul><li>存储位置：Cookie 是将数据存储在客户端，Session 将数据存储在服务端</li><li>安全性：Cookie不安全，Session安全</li><li>数据大小：Cookie有大小和数量个数，Session无大小限制</li><li>存储时间：Cookie可以通过setMaxAge()长期存储，Session默认30分钟</li><li>服务器性能：Cookie不占服务器资源，Session占用服务器资源</li></ul></li><li>应用场景: <ul><li>购物车:使用Cookie来存储 用于未登录的状态下（现在都是数据库）</li><li>以登录用户的名称展示:使用Session来存储</li><li>记住我功能:使用Cookie来存储</li><li>验证码:使用session来存储</li></ul></li><li>结论 <ul><li>Cookie是用来保证用户在未登录情况下的身份识别</li><li>Session是用来保存用户登录后的数据</li></ul></li></ul><p>介绍完Cookie和Session以后，具体用哪个还是需要根据具体的业务进行具体分析。</p>',175);function V(F,J){const e=p("ExternalLinkIcon");return o(),c("div",null,[W,n("p",null,[s("（2）访问BServlet对应的地址`"),n("a",N,[s("http://localhost:8080/cookie-demo/bServlet"),i(e)])]),M])}const Q=t(U,[["render",V],["__file","会话技术.html.vue"]]);export{Q as default};
