import{_ as t}from"./1624101899189-c445fb01.js";import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as o,a as n,b as a,d as i,e as s}from"./app-26096568.js";const u="/blog/assets/1624166071787-780e2fd8.png",d="/blog/assets/1624166725599-fbb21e3e.png",r="/blog/assets/1624166763111-5c23a739.png",k="/blog/assets/1624166976187-1cb3b843.png",v={},m=s('<h1 id="mysql读写分离" tabindex="-1"><a class="header-anchor" href="#mysql读写分离" aria-hidden="true">#</a> Mysql读写分离</h1><h2 id="一、mysql主从环境搭建" tabindex="-1"><a class="header-anchor" href="#一、mysql主从环境搭建" aria-hidden="true">#</a> 一、mysql主从环境搭建</h2><h3 id="_1、环境介绍" tabindex="-1"><a class="header-anchor" href="#_1、环境介绍" aria-hidden="true">#</a> 1、环境介绍</h3><p>1）本案例安装mysql5.7版本，使用的是docker容器方式进行安装。——Linux</p>',4),b=n("br",null,null,-1),g={href:"https://registry.hub.docker.com/_/mysql?tab=tags",target:"_blank",rel:"noopener noreferrer"},h=s(`<p>2）拟定1主1从的基本配置，主服务主要进行DDL操作，从服务器进行DQL操作。</p><h3 id="_2、-拉取镜像" tabindex="-1"><a class="header-anchor" href="#_2、-拉取镜像" aria-hidden="true">#</a> 2、 拉取镜像</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull mysql:5.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3、安装mysql主从服务" tabindex="-1"><a class="header-anchor" href="#_3、安装mysql主从服务" aria-hidden="true">#</a> 3、安装mysql主从服务</h3><table><thead><tr><th>服务器定位</th><th>端口映射</th><th>docker容器ip</th></tr></thead><tbody><tr><td>主master</td><td>33060</td><td>172.17.0.4</td></tr><tr><td>从slave1</td><td>33061</td><td>172.17.0.5</td></tr></tbody></table><blockquote><p>docker容器IP可以通过下面命令查看：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect 容器名/ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><h4 id="_3-0-主从复制过程示意图" tabindex="-1"><a class="header-anchor" href="#_3-0-主从复制过程示意图" aria-hidden="true">#</a> 3.0 主从复制过程示意图</h4><figure><img src="`+t+`" alt="1624101899189" tabindex="0" loading="lazy"><figcaption>1624101899189</figcaption></figure><blockquote><p>参考：</p><p><code>https://www.hoohack.me/2017/07/11/learning-mysql-replication-detail</code></p></blockquote><h4 id="_3-1-master安装、配置" tabindex="-1"><a class="header-anchor" href="#_3-1-master安装、配置" aria-hidden="true">#</a> 3.1 master安装、配置</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-itd</span> <span class="token parameter variable">-p</span> <span class="token number">33060</span>:3306 <span class="token parameter variable">--name</span> mysql_master <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>qwe123 mysql:5.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>此处没有进行目录挂载，所以会在docker容器中修改配置文件</p></blockquote><h4 id="_3-2-slave安装和配置" tabindex="-1"><a class="header-anchor" href="#_3-2-slave安装和配置" aria-hidden="true">#</a> 3.2 slave安装和配置</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-itd</span> <span class="token parameter variable">-p</span> <span class="token number">33061</span>:3306 <span class="token parameter variable">--name</span> mysql_master <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>qwe123 mysql:5.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-3-主服务器设置" tabindex="-1"><a class="header-anchor" href="#_3-3-主服务器设置" aria-hidden="true">#</a> 3.3 主服务器设置</h4><p>1）进入mysql_master容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql_master /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在容器中修改配置文件需要下载vim插件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">apt-get</span> update
<span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">vim</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2）修改mysql配置文件内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#进入 /etc/mysql/mysql.conf.d目录 window版本的：my.cnf</span>
<span class="token builtin class-name">cd</span> /etc/mysql/mysql.conf.d
<span class="token comment">#编辑mysqld.cnf配置文件</span>
<span class="token function">vim</span> mysqld.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在其中[mysqld]下添加配置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>log-bin<span class="token operator">=</span>mysql-bin
server-id<span class="token operator">=</span><span class="token number">1</span>
<span class="token assign-left variable">binlog_format</span><span class="token operator">=</span>mixed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>:wq
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>保存后退出容器。重启docker容器,并再次进入</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart mysql_master
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql_master /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3）登录容器中的mysql实例中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-pqwe123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看主节点状态，并且记录binlog文件名和偏移量；然后为从节点赋予权限</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span>

<span class="token comment">-- 注意下面的DCL语句中</span>
<span class="token comment">-- *.* 表示任意数据库(本案例没有指定具体数据库)的任意对象，</span>
<span class="token comment">-- &#39;slavereader&#39;@&#39;%&#39; 表示 从数据库连接用户名slavereader，ip任意</span>
<span class="token comment">-- identified by &#39;slave_pwd&#39; 密码是slave_pwd</span>
<span class="token keyword">grant</span> <span class="token keyword">replication</span> slave <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">&#39;slavereader&#39;</span><span class="token variable">@&#39;%&#39;</span> identified <span class="token keyword">by</span> <span class="token string">&#39;slave_pwd&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 刷新</span>
flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="1624166071787" tabindex="0" loading="lazy"><figcaption>1624166071787</figcaption></figure><p>主服务器配置完毕！</p><h4 id="_3-4-从服务器设置" tabindex="-1"><a class="header-anchor" href="#_3-4-从服务器设置" aria-hidden="true">#</a> 3.4 从服务器设置</h4><p>1）进入mysql_slave容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql_slave /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在容器中修改配置文件需要下载vim插件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">apt-get</span> update
<span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">vim</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2）修改mysql配置文件内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#进入 /etc/mysql/mysql.conf.d目录</span>
<span class="token builtin class-name">cd</span> /etc/mysql/mysql.conf.d
<span class="token comment">#编辑mysqld.cnf配置文件</span>
<span class="token function">vim</span> mysqld.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在其中[mysqld]下添加配置：此处的server-id=2，要异于主服务器id值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>log-bin<span class="token operator">=</span>mysql-bin
server-id<span class="token operator">=</span><span class="token number">2</span>
<span class="token assign-left variable">binlog_format</span><span class="token operator">=</span>mixed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>:wq
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>保存后退出容器。重启docker容器,并再次进入</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart mysql_slave
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql_slave /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3）登录容器中的mysql实例中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#此处的密码是我们在启动容器时，定义的root用户初始密码</span>
mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-pqwe123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为从服务器指定主服务器</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 172.17.0.4是主服务器地址</span>
<span class="token comment">-- slavereader是主服务器在赋从服务器权限时指定的用户名</span>
<span class="token comment">-- slave_pwd是主服务器在赋从服务器权限时指定的密码</span>
<span class="token comment">-- mysql-bin.000001和154分别是主服务器中的master status;</span>
change master <span class="token keyword">to</span> master_host<span class="token operator">=</span><span class="token string">&#39;172.17.0.4&#39;</span><span class="token punctuation">,</span>master_user<span class="token operator">=</span><span class="token string">&#39;slavereader&#39;</span><span class="token punctuation">,</span>master_password<span class="token operator">=</span><span class="token string">&#39;slave_pwd&#39;</span><span class="token punctuation">,</span>master_log_file<span class="token operator">=</span><span class="token string">&#39;mysql-bin.000001&#39;</span><span class="token punctuation">,</span>master_log_pos<span class="token operator">=</span><span class="token number">154</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4）然后启动从服务器角色</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">start</span> slave<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="1624166725599" tabindex="0" loading="lazy"><figcaption>1624166725599</figcaption></figure><p>查看从服务器状态</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> slave <span class="token keyword">status</span>\\G
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+r+'" alt="1624166763111" tabindex="0" loading="lazy"><figcaption>1624166763111</figcaption></figure><blockquote><p>可以看到主服务器信息，Slave_IO_Runningh和Slave_SQL_Running都是Yes</p></blockquote><p>至此，从服务器搭建完毕。我们可以通过客户端连接工具分别连接这两个mysql实例，然后在主服务器中创建数据库并建表、插入记录，可以在从服务器中同步看到数据。</p><figure><img src="'+k+`" alt="1624166976187" tabindex="0" loading="lazy"><figcaption>1624166976187</figcaption></figure><h2 id="二、spring整合mybatis读写分离" tabindex="-1"><a class="header-anchor" href="#二、spring整合mybatis读写分离" aria-hidden="true">#</a> 二、spring整合mybatis读写分离</h2><blockquote><p>​ 本案例采用的是继承<code>AbstractRoutingDataSource</code>的方式，利用spring来对数据源进行线程绑定、挑选。</p><p>​</p></blockquote><h3 id="基本思路" tabindex="-1"><a class="header-anchor" href="#基本思路" aria-hidden="true">#</a> 基本思路：</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>通过spring的AbstractRoutingDataSource为本线程绑定数据源，mybatis从本线程上拿数据源，获取连接操作数据库！
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现：</h3><p><code>参考代码附件</code>。</p><h3 id="基本步骤" tabindex="-1"><a class="header-anchor" href="#基本步骤" aria-hidden="true">#</a> 基本步骤：</h3><h2 id="三、其他" tabindex="-1"><a class="header-anchor" href="#三、其他" aria-hidden="true">#</a> 三、其他</h2><h4 id="_1-方案讨论" tabindex="-1"><a class="header-anchor" href="#_1-方案讨论" aria-hidden="true">#</a> 1）方案讨论</h4><p>​ 此方案有一个缺点，即无法在一个线程中切换数据源；即使完成切换，事务管理上还需要做分布式事务！此时，我们可以考虑另外一种途径来完成，如sharding-jdbc——该中间件对于分库分表的支持。</p><h4 id="sharding-jdbc的使用" tabindex="-1"><a class="header-anchor" href="#sharding-jdbc的使用" aria-hidden="true">#</a> sharding-jdbc的使用：</h4><h5 id="_1-1-导入关键依赖" tabindex="-1"><a class="header-anchor" href="#_1-1-导入关键依赖" aria-hidden="true">#</a> 1.1 导入关键依赖</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis-plus.version</span><span class="token punctuation">&gt;</span></span>3.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis-plus.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sharding-sphere.version</span><span class="token punctuation">&gt;</span></span>4.0.0-RC2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sharding-sphere.version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!--mybatis起步依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--sharding-jdbc 应用层面上分库分表--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.shardingsphere<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sharding-jdbc-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${sharding-sphere.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.shardingsphere<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sharding-jdbc-spring-namespace<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${sharding-sphere.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-配置主从" tabindex="-1"><a class="header-anchor" href="#_1-2-配置主从" aria-hidden="true">#</a> 1.2 配置主从</h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#配置主从 读写分离</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">shardingsphere</span><span class="token punctuation">:</span>
    <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
      <span class="token key atrule">names</span><span class="token punctuation">:</span> master<span class="token punctuation">,</span>slave0
      <span class="token key atrule">master</span><span class="token punctuation">:</span>
        <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource
        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver
        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.111.130<span class="token punctuation">:</span>33060/mydemodb<span class="token punctuation">?</span>serverTimezone=Asia/Shanghai<span class="token important">&amp;useUnicode=true&amp;characterEncoding=utf8</span>
        <span class="token key atrule">username</span><span class="token punctuation">:</span> root
        <span class="token key atrule">password</span><span class="token punctuation">:</span> qwe123
      <span class="token key atrule">slave0</span><span class="token punctuation">:</span>
        <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource
        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver
        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.111.130<span class="token punctuation">:</span>33061/mydemodb<span class="token punctuation">?</span>serverTimezone=Asia/Shanghai<span class="token important">&amp;useUnicode=true&amp;characterEncoding=utf8</span>
        <span class="token key atrule">username</span><span class="token punctuation">:</span> root
        <span class="token key atrule">password</span><span class="token punctuation">:</span> qwe123
    <span class="token comment">#配置主从规则</span>
    <span class="token key atrule">masterslave</span><span class="token punctuation">:</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> ms
      <span class="token key atrule">master-data-source-name</span><span class="token punctuation">:</span> master
      <span class="token comment">#多个从节点使用,间隔</span>
      <span class="token key atrule">slave-data-source-names</span><span class="token punctuation">:</span> slave0
      <span class="token comment">#默认从节点轮询方式访问：RoundRobinMasterSlaveLoadBalanceAlgorithm； random:随机策略:RoundRobinMasterSlaveLoadBalanceAlgorithm</span>
<span class="token comment">#      load-balance-algorithm-type: round_robin</span>
    <span class="token key atrule">props</span><span class="token punctuation">:</span>
      <span class="token key atrule">sql</span><span class="token punctuation">:</span>
        <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-3-接口正常开发" tabindex="-1"><a class="header-anchor" href="#_1-3-接口正常开发" aria-hidden="true">#</a> 1.3 接口正常开发</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WorkorderMapper</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">&quot;insert into t_workorder(id,member_id,reason,receive_time) values(#{id},#{memberId},#{reason},#{receiveTime})&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insertWorkorder</span><span class="token punctuation">(</span><span class="token class-name">Workorder</span> workorder<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from t_workorder&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Workorder</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-4-引导类" tabindex="-1"><a class="header-anchor" href="#_1-4-引导类" aria-hidden="true">#</a> 1.4 引导类</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.itheima.shardingms.mapper&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShardingMSApp</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ShardingMSApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-5-测试类" tabindex="-1"><a class="header-anchor" href="#_1-5-测试类" aria-hidden="true">#</a> 1.5 测试类</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDBMS</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">WorkorderMapper</span> workorderMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertWorkorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">SnowFlake</span> snowFlake <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SnowFlake</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> id <span class="token operator">=</span> snowFlake<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Workorder</span> workorder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Workorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        workorder<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        workorder<span class="token punctuation">.</span><span class="token function">setMemberId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        workorder<span class="token punctuation">.</span><span class="token function">setReason</span><span class="token punctuation">(</span><span class="token string">&quot;refuse goods&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        workorder<span class="token punctuation">.</span><span class="token function">setReceiveTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        workorderMapper<span class="token punctuation">.</span><span class="token function">insertWorkorder</span><span class="token punctuation">(</span>workorder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Workorder</span><span class="token punctuation">&gt;</span></span> workorders <span class="token operator">=</span> workorderMapper<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>workorders<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-binlog-format" tabindex="-1"><a class="header-anchor" href="#_2-binlog-format" aria-hidden="true">#</a> 2）binlog_format</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mysql复制主要有三种方式：
	基于SQL语句的复制(statement-based replication, SBR)，
	基于行的复制(row-based replication, RBR)，
	混合模式复制(mixed-based replication, MBR)。
对应的，binlog的格式也有三种：STATEMENT，ROW，MIXED。

STATEMENT模式（SBR）

每一条会修改数据的sql语句会记录到binlog中。优点是并不需要记录每一条sql语句和每一行的数据变化，减少了binlog日志量，节约IO，提高性能。缺点是在某些情况下会导致master-slave中的数据不一致(如sleep()函数， last_insert_id()，以及user-defined functions(udf)等会出现问题)

ROW模式（RBR）

不记录每条sql语句的上下文信息，仅需记录哪条数据被修改了，修改成什么样了。而且不会出现某些特定情况下的存储过程、或function、或trigger的调用和触发无法被正确复制的问题。缺点是会产生大量的日志，尤其是alter table的时候会让日志暴涨。

MIXED模式（MBR）

以上两种模式的混合使用，一般的复制使用STATEMENT模式保存binlog，对于STATEMENT模式无法复制的操作使用ROW模式保存binlog，MySQL会根据执行的SQL语句选择日志保存方式。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-开发时注意点" tabindex="-1"><a class="header-anchor" href="#_3-开发时注意点" aria-hidden="true">#</a> 3）开发时注意点</h4><h5 id="_3-1-注解类" tabindex="-1"><a class="header-anchor" href="#_3-1-注解类" aria-hidden="true">#</a> 3.1 注解类</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@Retention(RetentionPolicy.RUNTIME)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 记得添加存活策略</p><h5 id="_3-2-切面类" tabindex="-1"><a class="header-anchor" href="#_3-2-切面类" aria-hidden="true">#</a> 3.2 切面类</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span> <span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwitchDSAspect</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>需要添加@Order(0)，让其增强方法执行时机在<code>AbstractRoutingDataSource.determineCurrentLookupKey</code>之前！否则无法选择数据源！</p><p>切面的<code>Pointcut</code>我采用的是找注解对应的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;@annotation(com.itheima.ms.anno.DS)&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以使用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;execution(* com.itheima.ms.service..*.*(*))&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><h5 id="_3-3-数据源配置类" tabindex="-1"><a class="header-anchor" href="#_3-3-数据源配置类" aria-hidden="true">#</a> 3.3 数据源配置类</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@Primary</span>
<span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;master&quot;</span><span class="token punctuation">)</span> <span class="token class-name">DataSource</span> master<span class="token punctuation">,</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;slave&quot;</span><span class="token punctuation">)</span> <span class="token class-name">DataSource</span> slave<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DBRoleEnum</span><span class="token punctuation">,</span><span class="token class-name">DataSource</span><span class="token punctuation">&gt;</span></span> dataSourceMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dataSourceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">DBRoleEnum</span><span class="token punctuation">.</span><span class="token constant">MASTER</span><span class="token punctuation">,</span>master<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dataSourceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">DBRoleEnum</span><span class="token punctuation">.</span><span class="token constant">SLAVE</span><span class="token punctuation">,</span>slave<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyDynamicDataSource</span><span class="token punctuation">(</span>master<span class="token punctuation">,</span>dataSourceMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>建议在方法上添加@Primary来让容器有限选择该DataSource。</p></blockquote><h5 id="_3-4-引导类" tabindex="-1"><a class="header-anchor" href="#_3-4-引导类" aria-hidden="true">#</a> 3.4 引导类</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span>proxyTargetClass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.itheima.ms.mapper&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>引导类上，排除了DataSourceAutoConfiguration自动配置，防止<code>重复引用</code>异常！</p></blockquote><h5 id="_3-5-雪花算法" tabindex="-1"><a class="header-anchor" href="#_3-5-雪花算法" aria-hidden="true">#</a> 3.5 雪花算法</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SnowFlakeConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">SnowFlake</span> <span class="token function">snowFlake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SnowFlake</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>​ 本案例中，对于雪花算法的<code>数据中心值</code>、<code>机器号值</code>直接写死了，没有动态读取yml配置内容。</p></blockquote><h5 id="_3-6-原理分析参考" tabindex="-1"><a class="header-anchor" href="#_3-6-原理分析参考" aria-hidden="true">#</a> 3.6 原理分析参考：</h5><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//blog.csdn.net/u013034378/article/details/81661706</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,92);function y(f,q){const e=c("ExternalLinkIcon");return l(),o("div",null,[m,n("blockquote",null,[n("p",null,[a("docker搜索网站可以参考："),b,n("a",g,[a("https://registry.hub.docker.com/_/mysql?tab=tags"),i(e)])])]),h])}const S=p(v,[["render",y],["__file","Mysql读写分离.html.vue"]]);export{S as default};
