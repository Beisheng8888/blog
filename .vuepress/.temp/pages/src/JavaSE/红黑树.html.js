export const data = JSON.parse("{\"key\":\"v-3c2114ce\",\"path\":\"/src/JavaSE/%E7%BA%A2%E9%BB%91%E6%A0%91.html\",\"title\":\"红黑树\",\"lang\":\"zh-CN\",\"frontmatter\":{\"category\":[\"JavaSE\"],\"description\":\"红黑树 1.红黑树 1.1概述【理解】 红黑树的特点 平衡二叉B树 每一个节点可以是红或者黑 红黑树不是高度平衡的,它的平衡是通过\\\"自己的红黑规则\\\"进行实现的 红黑树的红黑规则有哪些 每一个节点或是红色的,或者是黑色的 根节点必须是黑色 如果一个节点没有子节点或者父节点,则该节点相应的指针属性值为Nil,这些Nil视为叶节点,每个叶节点(Nil)是黑色的 如果某一个节点是红色,那么它的子节点必须是黑色(不能出现两个红色节点相连 的情况) 对每一个节点,从该节点到其所有后代叶节点的简单路径上,均包含相同数目的黑色节点 12_红黑树结构图 红黑树添加节点的默认颜色 添加节点时,默认为红色,效率高 13_红黑树添加节点颜色 红黑树添加节点后如何保持红黑规则 根节点位置 直接变为黑色 非根节点位置 父节点为黑色 不需要任何操作,默认红色即可 父节点为红色 叔叔节点为红色 将\\\"父节点\\\"设为黑色,将\\\"叔叔节点\\\"设为黑色 将\\\"祖父节点\\\"设为红色 如果\\\"祖父节点\\\"为根节点,则将根节点再次变成黑色 叔叔节点为黑色 将\\\"父节点\\\"设为黑色 将\\\"祖父节点\\\"设为红色 以\\\"祖父节点\\\"为支点进行旋转\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://github.com/Beisheng8888/blog/src/JavaSE/%E7%BA%A2%E9%BB%91%E6%A0%91.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Mr.Jh\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"红黑树\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"红黑树 1.红黑树 1.1概述【理解】 红黑树的特点 平衡二叉B树 每一个节点可以是红或者黑 红黑树不是高度平衡的,它的平衡是通过\\\"自己的红黑规则\\\"进行实现的 红黑树的红黑规则有哪些 每一个节点或是红色的,或者是黑色的 根节点必须是黑色 如果一个节点没有子节点或者父节点,则该节点相应的指针属性值为Nil,这些Nil视为叶节点,每个叶节点(Nil)是黑色的 如果某一个节点是红色,那么它的子节点必须是黑色(不能出现两个红色节点相连 的情况) 对每一个节点,从该节点到其所有后代叶节点的简单路径上,均包含相同数目的黑色节点 12_红黑树结构图 红黑树添加节点的默认颜色 添加节点时,默认为红色,效率高 13_红黑树添加节点颜色 红黑树添加节点后如何保持红黑规则 根节点位置 直接变为黑色 非根节点位置 父节点为黑色 不需要任何操作,默认红色即可 父节点为红色 叔叔节点为红色 将\\\"父节点\\\"设为黑色,将\\\"叔叔节点\\\"设为黑色 将\\\"祖父节点\\\"设为红色 如果\\\"祖父节点\\\"为根节点,则将根节点再次变成黑色 叔叔节点为黑色 将\\\"父节点\\\"设为黑色 将\\\"祖父节点\\\"设为红色 以\\\"祖父节点\\\"为支点进行旋转\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Mr.Jh\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"红黑树\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Mr.Jh\\\",\\\"url\\\":\\\"https://github.com/Beisheng8888\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"1.红黑树\",\"slug\":\"_1-红黑树\",\"link\":\"#_1-红黑树\",\"children\":[{\"level\":3,\"title\":\"1.1概述【理解】\",\"slug\":\"_1-1概述【理解】\",\"link\":\"#_1-1概述【理解】\",\"children\":[]},{\"level\":3,\"title\":\"1.2成绩排序案例【应用】\",\"slug\":\"_1-2成绩排序案例【应用】\",\"link\":\"#_1-2成绩排序案例【应用】\",\"children\":[]}]},{\"level\":2,\"title\":\"2.HashSet集合\",\"slug\":\"_2-hashset集合\",\"link\":\"#_2-hashset集合\",\"children\":[{\"level\":3,\"title\":\"2.1HashSet集合概述和特点【应用】\",\"slug\":\"_2-1hashset集合概述和特点【应用】\",\"link\":\"#_2-1hashset集合概述和特点【应用】\",\"children\":[]},{\"level\":3,\"title\":\"2.2 HashSet 集合的基本应用【应用】\",\"slug\":\"_2-2-hashset-集合的基本应用【应用】\",\"link\":\"#_2-2-hashset-集合的基本应用【应用】\",\"children\":[]},{\"level\":3,\"title\":\"2.3哈希值【理解】\",\"slug\":\"_2-3哈希值【理解】\",\"link\":\"#_2-3哈希值【理解】\",\"children\":[]},{\"level\":3,\"title\":\"2.4哈希表结构【理解】\",\"slug\":\"_2-4哈希表结构【理解】\",\"link\":\"#_2-4哈希表结构【理解】\",\"children\":[]},{\"level\":3,\"title\":\"2.5HashSet集合存储学生对象并遍历【应用】\",\"slug\":\"_2-5hashset集合存储学生对象并遍历【应用】\",\"link\":\"#_2-5hashset集合存储学生对象并遍历【应用】\",\"children\":[]}]},{\"level\":2,\"title\":\"3.Map集合\",\"slug\":\"_3-map集合\",\"link\":\"#_3-map集合\",\"children\":[{\"level\":3,\"title\":\"3.1Map集合概述和特点【理解】\",\"slug\":\"_3-1map集合概述和特点【理解】\",\"link\":\"#_3-1map集合概述和特点【理解】\",\"children\":[]},{\"level\":3,\"title\":\"3.2Map集合的基本功能【应用】\",\"slug\":\"_3-2map集合的基本功能【应用】\",\"link\":\"#_3-2map集合的基本功能【应用】\",\"children\":[]},{\"level\":3,\"title\":\"3.3Map集合的获取功能【应用】\",\"slug\":\"_3-3map集合的获取功能【应用】\",\"link\":\"#_3-3map集合的获取功能【应用】\",\"children\":[]},{\"level\":3,\"title\":\"3.4Map集合的遍历(方式1)【应用】\",\"slug\":\"_3-4map集合的遍历-方式1-【应用】\",\"link\":\"#_3-4map集合的遍历-方式1-【应用】\",\"children\":[]},{\"level\":3,\"title\":\"3.5Map集合的遍历(方式2)【应用】\",\"slug\":\"_3-5map集合的遍历-方式2-【应用】\",\"link\":\"#_3-5map集合的遍历-方式2-【应用】\",\"children\":[]}]},{\"level\":2,\"title\":\"4.HashMap集合\",\"slug\":\"_4-hashmap集合\",\"link\":\"#_4-hashmap集合\",\"children\":[{\"level\":3,\"title\":\"4.1HashMap集合概述和特点【理解】\",\"slug\":\"_4-1hashmap集合概述和特点【理解】\",\"link\":\"#_4-1hashmap集合概述和特点【理解】\",\"children\":[]},{\"level\":3,\"title\":\"4.2HashMap集合应用案例【应用】\",\"slug\":\"_4-2hashmap集合应用案例【应用】\",\"link\":\"#_4-2hashmap集合应用案例【应用】\",\"children\":[]}]},{\"level\":2,\"title\":\"5.TreeMap集合\",\"slug\":\"_5-treemap集合\",\"link\":\"#_5-treemap集合\",\"children\":[{\"level\":3,\"title\":\"5.1TreeMap集合概述和特点【理解】\",\"slug\":\"_5-1treemap集合概述和特点【理解】\",\"link\":\"#_5-1treemap集合概述和特点【理解】\",\"children\":[]},{\"level\":3,\"title\":\"5.2TreeMap集合应用案例【应用】\",\"slug\":\"_5-2treemap集合应用案例【应用】\",\"link\":\"#_5-2treemap集合应用案例【应用】\",\"children\":[]}]}],\"readingTime\":{\"minutes\":11.1,\"words\":3330},\"filePathRelative\":\"src/JavaSE/红黑树.md\",\"excerpt\":\"<h1> 红黑树</h1>\\n<h2> 1.红黑树</h2>\\n<h3> 1.1概述【理解】</h3>\\n<ul>\\n<li>\\n<p>红黑树的特点</p>\\n<ul>\\n<li>平衡二叉B树</li>\\n<li>每一个节点可以是红或者黑</li>\\n<li>红黑树不是高度平衡的,它的平衡是通过\\\"自己的红黑规则\\\"进行实现的</li>\\n</ul>\\n</li>\\n<li>\\n<p>红黑树的红黑规则有哪些</p>\\n<ol>\\n<li>\\n<p>每一个节点或是红色的,或者是黑色的</p>\\n</li>\\n<li>\\n<p>根节点必须是黑色</p>\\n</li>\\n<li>\\n<p>如果一个节点没有子节点或者父节点,则该节点相应的指针属性值为Nil,这些Nil视为叶节点,每个叶节点(Nil)是黑色的</p>\\n</li>\\n<li>\\n<p>如果某一个节点是红色,那么它的子节点必须是黑色(不能出现两个红色节点相连 的情况)</p>\\n</li>\\n<li>\\n<p>对每一个节点,从该节点到其所有后代叶节点的简单路径上,均包含相同数目的黑色节点</p>\\n<figure><figcaption>12_红黑树结构图</figcaption></figure>\\n</li>\\n</ol>\\n</li>\\n<li>\\n<p>红黑树添加节点的默认颜色</p>\\n<ul>\\n<li>\\n<p>添加节点时,默认为红色,效率高</p>\\n<figure><figcaption>13_红黑树添加节点颜色</figcaption></figure>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>红黑树添加节点后如何保持红黑规则</p>\\n<ul>\\n<li>根节点位置\\n<ul>\\n<li>直接变为黑色</li>\\n</ul>\\n</li>\\n<li>非根节点位置\\n<ul>\\n<li>父节点为黑色\\n<ul>\\n<li>不需要任何操作,默认红色即可</li>\\n</ul>\\n</li>\\n<li>父节点为红色\\n<ul>\\n<li>叔叔节点为红色\\n<ol>\\n<li>将\\\"父节点\\\"设为黑色,将\\\"叔叔节点\\\"设为黑色</li>\\n<li>将\\\"祖父节点\\\"设为红色</li>\\n<li>如果\\\"祖父节点\\\"为根节点,则将根节点再次变成黑色</li>\\n</ol>\\n</li>\\n<li>叔叔节点为黑色\\n<ol>\\n<li>将\\\"父节点\\\"设为黑色</li>\\n<li>将\\\"祖父节点\\\"设为红色</li>\\n<li>以\\\"祖父节点\\\"为支点进行旋转</li>\\n</ol>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
