export const data = JSON.parse("{\"key\":\"v-65a294b2\",\"path\":\"/src/JavaSE/%E5%B8%B8%E7%94%A8API02.html\",\"title\":\"常用API02\",\"lang\":\"zh-CN\",\"frontmatter\":{\"category\":[\"JavaSE\"],\"description\":\"常用API02 1.时间日期类 1.1 Date类（应用） 计算机中时间原点 1970年1月1日 00:00:00 时间换算单位 1秒 = 1000毫秒 Date类概述 Date 代表了一个特定的时间，精确到毫秒 Date类构造方法 方法名 说明 public Date() 分配一个 Date对象，并初始化，以便它代表它被分配的时间，精确到毫秒 public Date(long date) 分配一个 Date对象，并将其初始化为表示从标准基准时间起指定的毫秒数 示例代码 public class DateDemo01 { public static void main(String[] args) { //public Date()：分配一个 Date对象，并初始化，以便它代表它被分配的时间，精确到毫秒 Date d1 = new Date(); System.out.println(d1); //public Date(long date)：分配一个 Date对象，并将其初始化为表示从标准基准时间起指定的毫秒数 long date = 1000*60*60; Date d2 = new Date(date); System.out.println(d2); } }\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://github.com/Beisheng8888/blog/src/JavaSE/%E5%B8%B8%E7%94%A8API02.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"冀辉的博客\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"常用API02\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"常用API02 1.时间日期类 1.1 Date类（应用） 计算机中时间原点 1970年1月1日 00:00:00 时间换算单位 1秒 = 1000毫秒 Date类概述 Date 代表了一个特定的时间，精确到毫秒 Date类构造方法 方法名 说明 public Date() 分配一个 Date对象，并初始化，以便它代表它被分配的时间，精确到毫秒 public Date(long date) 分配一个 Date对象，并将其初始化为表示从标准基准时间起指定的毫秒数 示例代码 public class DateDemo01 { public static void main(String[] args) { //public Date()：分配一个 Date对象，并初始化，以便它代表它被分配的时间，精确到毫秒 Date d1 = new Date(); System.out.println(d1); //public Date(long date)：分配一个 Date对象，并将其初始化为表示从标准基准时间起指定的毫秒数 long date = 1000*60*60; Date d2 = new Date(date); System.out.println(d2); } }\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Mr.Jh\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"常用API02\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Mr.Jh\\\",\\\"url\\\":\\\"https://github.com/Beisheng8888\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"1.时间日期类\",\"slug\":\"_1-时间日期类\",\"link\":\"#_1-时间日期类\",\"children\":[{\"level\":3,\"title\":\"1.1 Date类（应用）\",\"slug\":\"_1-1-date类-应用\",\"link\":\"#_1-1-date类-应用\",\"children\":[]},{\"level\":3,\"title\":\"1.2 Date类常用方法（应用）\",\"slug\":\"_1-2-date类常用方法-应用\",\"link\":\"#_1-2-date类常用方法-应用\",\"children\":[]},{\"level\":3,\"title\":\"1.3 SimpleDateFormat类（应用）\",\"slug\":\"_1-3-simpledateformat类-应用\",\"link\":\"#_1-3-simpledateformat类-应用\",\"children\":[]},{\"level\":3,\"title\":\"1.4 时间日期类练习 (应用)\",\"slug\":\"_1-4-时间日期类练习-应用\",\"link\":\"#_1-4-时间日期类练习-应用\",\"children\":[]}]},{\"level\":2,\"title\":\"2.JDK8时间日期类\",\"slug\":\"_2-jdk8时间日期类\",\"link\":\"#_2-jdk8时间日期类\",\"children\":[{\"level\":3,\"title\":\"2.1 JDK8新增日期类 (理解)\",\"slug\":\"_2-1-jdk8新增日期类-理解\",\"link\":\"#_2-1-jdk8新增日期类-理解\",\"children\":[]},{\"level\":3,\"title\":\"2.2 LocalDateTime创建方法 (应用)\",\"slug\":\"_2-2-localdatetime创建方法-应用\",\"link\":\"#_2-2-localdatetime创建方法-应用\",\"children\":[]},{\"level\":3,\"title\":\"2.3 LocalDateTime获取方法 (应用)\",\"slug\":\"_2-3-localdatetime获取方法-应用\",\"link\":\"#_2-3-localdatetime获取方法-应用\",\"children\":[]},{\"level\":3,\"title\":\"2.4 LocalDateTime转换方法 (应用)\",\"slug\":\"_2-4-localdatetime转换方法-应用\",\"link\":\"#_2-4-localdatetime转换方法-应用\",\"children\":[]},{\"level\":3,\"title\":\"2.5 LocalDateTime格式化和解析 (应用)\",\"slug\":\"_2-5-localdatetime格式化和解析-应用\",\"link\":\"#_2-5-localdatetime格式化和解析-应用\",\"children\":[]},{\"level\":3,\"title\":\"2.6 LocalDateTime增加或者减少时间的方法 (应用)\",\"slug\":\"_2-6-localdatetime增加或者减少时间的方法-应用\",\"link\":\"#_2-6-localdatetime增加或者减少时间的方法-应用\",\"children\":[]},{\"level\":3,\"title\":\"2.7 LocalDateTime减少或者增加时间的方法 (应用)\",\"slug\":\"_2-7-localdatetime减少或者增加时间的方法-应用\",\"link\":\"#_2-7-localdatetime减少或者增加时间的方法-应用\",\"children\":[]},{\"level\":3,\"title\":\"2.8 LocalDateTime修改方法 (应用)\",\"slug\":\"_2-8-localdatetime修改方法-应用\",\"link\":\"#_2-8-localdatetime修改方法-应用\",\"children\":[]},{\"level\":3,\"title\":\"2.9 Period (应用)\",\"slug\":\"_2-9-period-应用\",\"link\":\"#_2-9-period-应用\",\"children\":[]},{\"level\":3,\"title\":\"2.10 Duration (应用)\",\"slug\":\"_2-10-duration-应用\",\"link\":\"#_2-10-duration-应用\",\"children\":[]}]},{\"level\":2,\"title\":\"3.异常\",\"slug\":\"_3-异常\",\"link\":\"#_3-异常\",\"children\":[{\"level\":3,\"title\":\"3.1 异常（记忆）\",\"slug\":\"_3-1-异常-记忆\",\"link\":\"#_3-1-异常-记忆\",\"children\":[]},{\"level\":3,\"title\":\"3.2 编译时异常和运行时异常的区别（记忆）\",\"slug\":\"_3-2-编译时异常和运行时异常的区别-记忆\",\"link\":\"#_3-2-编译时异常和运行时异常的区别-记忆\",\"children\":[]},{\"level\":3,\"title\":\"3.3 JVM默认处理异常的方式（理解）\",\"slug\":\"_3-3-jvm默认处理异常的方式-理解\",\"link\":\"#_3-3-jvm默认处理异常的方式-理解\",\"children\":[]},{\"level\":3,\"title\":\"3.4 查看异常信息 (理解)\",\"slug\":\"_3-4-查看异常信息-理解\",\"link\":\"#_3-4-查看异常信息-理解\",\"children\":[]},{\"level\":3,\"title\":\"3.5 throws方式处理异常（应用）\",\"slug\":\"_3-5-throws方式处理异常-应用\",\"link\":\"#_3-5-throws方式处理异常-应用\",\"children\":[]},{\"level\":3,\"title\":\"3.6 throw抛出异常 (应用)\",\"slug\":\"_3-6-throw抛出异常-应用\",\"link\":\"#_3-6-throw抛出异常-应用\",\"children\":[]},{\"level\":3,\"title\":\"3.7 try-catch方式处理异常（应用）\",\"slug\":\"_3-7-try-catch方式处理异常-应用\",\"link\":\"#_3-7-try-catch方式处理异常-应用\",\"children\":[]},{\"level\":3,\"title\":\"3.8 Throwable成员方法（应用）\",\"slug\":\"_3-8-throwable成员方法-应用\",\"link\":\"#_3-8-throwable成员方法-应用\",\"children\":[]},{\"level\":3,\"title\":\"3.9 异常的练习 (应用)\",\"slug\":\"_3-9-异常的练习-应用\",\"link\":\"#_3-9-异常的练习-应用\",\"children\":[]},{\"level\":3,\"title\":\"3.10 自定义异常（应用）\",\"slug\":\"_3-10-自定义异常-应用\",\"link\":\"#_3-10-自定义异常-应用\",\"children\":[]}]}],\"readingTime\":{\"minutes\":15.88,\"words\":4765},\"filePathRelative\":\"src/JavaSE/常用API02.md\",\"excerpt\":\"<h1> 常用API02</h1>\\n<h2> 1.时间日期类</h2>\\n<h3> 1.1 Date类（应用）</h3>\\n<ul>\\n<li>\\n<p>计算机中时间原点</p>\\n<p>1970年1月1日 00:00:00</p>\\n</li>\\n<li>\\n<p>时间换算单位</p>\\n<p>1秒 = 1000毫秒</p>\\n</li>\\n<li>\\n<p>Date类概述</p>\\n<p>Date 代表了一个特定的时间，精确到毫秒</p>\\n</li>\\n<li>\\n<p>Date类构造方法</p>\\n<table>\\n<thead>\\n<tr>\\n<th>方法名</th>\\n<th>说明</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>public Date()</td>\\n<td>分配一个 Date对象，并初始化，以便它代表它被分配的时间，精确到毫秒</td>\\n</tr>\\n<tr>\\n<td>public Date(long date)</td>\\n<td>分配一个 Date对象，并将其初始化为表示从标准基准时间起指定的毫秒数</td>\\n</tr>\\n</tbody>\\n</table>\\n</li>\\n<li>\\n<p>示例代码</p>\\n<div class=\\\"language-java line-numbers-mode\\\" data-ext=\\\"java\\\"><pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">DateDemo01</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//public Date()：分配一个 Date对象，并初始化，以便它代表它被分配的时间，精确到毫秒</span>\\n        <span class=\\\"token class-name\\\">Date</span> d1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token class-name\\\">System</span><span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>d1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token comment\\\">//public Date(long date)：分配一个 Date对象，并将其初始化为表示从标准基准时间起指定的毫秒数</span>\\n        <span class=\\\"token keyword\\\">long</span> date <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">60</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">60</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token class-name\\\">Date</span> d2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span>date<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token class-name\\\">System</span><span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>d2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div></li>\\n</ul>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
