export const data = JSON.parse("{\"key\":\"v-2d44bdc0\",\"path\":\"/src/JavaSE/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E5%8F%8D%E5%B0%84.html\",\"title\":\"类加载器和反射\",\"lang\":\"zh-CN\",\"frontmatter\":{\"category\":[\"JavaSE\"],\"description\":\"类加载器和反射 1.类加载器 1.1类加载器【理解】 作用 负责将.class文件（存储的物理文件）加载在到内存中 01_类加载器 1.2类加载的过程【理解】 类加载时机 创建类的实例（对象） 调用类的类方法 访问类或者接口的类变量，或者为该类变量赋值 使用反射方式来强制创建某个类或接口对应的java.lang.Class对象 初始化某个类的子类 直接使用java.exe命令来运行某个主类 ​\\t（第一次用就加载，不用就不加载） 类加载过程 加载 通过包名 + 类名，获取这个类，准备用流进行传输 在这个类加载到内存中 加载完毕创建一个class对象 02_类加载过程加载 链接 验证 确保Class文件字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身安全 (文件中的信息是否符合虚拟机规范有没有安全隐患) 03_类加载过程验证 准备 负责为类的类变量（被static修饰的变量）分配内存，并设置默认初始化值 (初始化静态变量) 04_类加载过程准备 解析 将类的二进制数据流中的符号引用替换为直接引用 (本类中如果用到了其他类，此时就需要找到对应的类) 05_类加载过程解析 初始化 根据程序员通过程序制定的主观计划去初始化类变量和其他资源 (静态变量赋值以及初始化其他资源) 06_类加载过程初始化 小结 当一个类被使用的时候，才会加载到内存 类加载的过程: 加载、验证、准备、解析、初始化\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://github.com/Beisheng8888/blog/src/JavaSE/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E5%8F%8D%E5%B0%84.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Mr.Jh\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"类加载器和反射\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"类加载器和反射 1.类加载器 1.1类加载器【理解】 作用 负责将.class文件（存储的物理文件）加载在到内存中 01_类加载器 1.2类加载的过程【理解】 类加载时机 创建类的实例（对象） 调用类的类方法 访问类或者接口的类变量，或者为该类变量赋值 使用反射方式来强制创建某个类或接口对应的java.lang.Class对象 初始化某个类的子类 直接使用java.exe命令来运行某个主类 ​\\t（第一次用就加载，不用就不加载） 类加载过程 加载 通过包名 + 类名，获取这个类，准备用流进行传输 在这个类加载到内存中 加载完毕创建一个class对象 02_类加载过程加载 链接 验证 确保Class文件字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身安全 (文件中的信息是否符合虚拟机规范有没有安全隐患) 03_类加载过程验证 准备 负责为类的类变量（被static修饰的变量）分配内存，并设置默认初始化值 (初始化静态变量) 04_类加载过程准备 解析 将类的二进制数据流中的符号引用替换为直接引用 (本类中如果用到了其他类，此时就需要找到对应的类) 05_类加载过程解析 初始化 根据程序员通过程序制定的主观计划去初始化类变量和其他资源 (静态变量赋值以及初始化其他资源) 06_类加载过程初始化 小结 当一个类被使用的时候，才会加载到内存 类加载的过程: 加载、验证、准备、解析、初始化\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-07-18T07:08:24.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Mr.Jh\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-07-18T07:08:24.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"类加载器和反射\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2023-07-18T07:08:24.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Mr.Jh\\\",\\\"url\\\":\\\"https://github.com/Beisheng8888\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"1.类加载器\",\"slug\":\"_1-类加载器\",\"link\":\"#_1-类加载器\",\"children\":[{\"level\":3,\"title\":\"1.1类加载器【理解】\",\"slug\":\"_1-1类加载器【理解】\",\"link\":\"#_1-1类加载器【理解】\",\"children\":[]},{\"level\":3,\"title\":\"1.2类加载的过程【理解】\",\"slug\":\"_1-2类加载的过程【理解】\",\"link\":\"#_1-2类加载的过程【理解】\",\"children\":[]},{\"level\":3,\"title\":\"1.3类加载的分类【理解】\",\"slug\":\"_1-3类加载的分类【理解】\",\"link\":\"#_1-3类加载的分类【理解】\",\"children\":[]},{\"level\":3,\"title\":\"1.4双亲委派模型【理解】\",\"slug\":\"_1-4双亲委派模型【理解】\",\"link\":\"#_1-4双亲委派模型【理解】\",\"children\":[]},{\"level\":3,\"title\":\"1.5ClassLoader 中的两个方法【应用】\",\"slug\":\"_1-5classloader-中的两个方法【应用】\",\"link\":\"#_1-5classloader-中的两个方法【应用】\",\"children\":[]}]},{\"level\":2,\"title\":\"2.反射\",\"slug\":\"_2-反射\",\"link\":\"#_2-反射\",\"children\":[{\"level\":3,\"title\":\"2.1反射的概述【理解】\",\"slug\":\"_2-1反射的概述【理解】\",\"link\":\"#_2-1反射的概述【理解】\",\"children\":[]},{\"level\":3,\"title\":\"2.2获取Class类对象的三种方式【应用】\",\"slug\":\"_2-2获取class类对象的三种方式【应用】\",\"link\":\"#_2-2获取class类对象的三种方式【应用】\",\"children\":[]},{\"level\":3,\"title\":\"2.3反射获取构造方法并使用【应用】\",\"slug\":\"_2-3反射获取构造方法并使用【应用】\",\"link\":\"#_2-3反射获取构造方法并使用【应用】\",\"children\":[]},{\"level\":3,\"title\":\"2.4反射获取成员变量并使用【应用】\",\"slug\":\"_2-4反射获取成员变量并使用【应用】\",\"link\":\"#_2-4反射获取成员变量并使用【应用】\",\"children\":[]},{\"level\":3,\"title\":\"2.5反射获取成员方法并使用【应用】\",\"slug\":\"_2-5反射获取成员方法并使用【应用】\",\"link\":\"#_2-5反射获取成员方法并使用【应用】\",\"children\":[]}]}],\"git\":{\"createdTime\":1689562016000,\"updatedTime\":1689664104000,\"contributors\":[{\"name\":\"北省\",\"email\":\"jih6666@126.com\",\"commits\":2}]},\"readingTime\":{\"minutes\":12.7,\"words\":3809},\"filePathRelative\":\"src/JavaSE/类加载器和反射.md\",\"localizedDate\":\"2023年7月17日\",\"excerpt\":\"<h1> 类加载器和反射</h1>\\n<h2> 1.类加载器</h2>\\n<h3> 1.1类加载器【理解】</h3>\\n<ul>\\n<li>\\n<p>作用</p>\\n<p>负责将.class文件（存储的物理文件）加载在到内存中</p>\\n<figure><figcaption>01_类加载器</figcaption></figure>\\n</li>\\n</ul>\\n<h3> 1.2类加载的过程【理解】</h3>\\n<ul>\\n<li>\\n<p>类加载时机</p>\\n<ul>\\n<li>\\n<p>创建类的实例（对象）</p>\\n</li>\\n<li>\\n<p>调用类的类方法</p>\\n</li>\\n<li>\\n<p>访问类或者接口的类变量，或者为该类变量赋值</p>\\n</li>\\n<li>\\n<p>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</p>\\n</li>\\n<li>\\n<p>初始化某个类的子类</p>\\n</li>\\n<li>\\n<p>直接使用java.exe命令来运行某个主类</p>\\n<p>​\\t（第一次用就加载，不用就不加载）</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>类加载过程</p>\\n<ol>\\n<li>\\n<p>加载</p>\\n<ul>\\n<li>通过包名 + 类名，获取这个类，准备用流进行传输</li>\\n<li>在这个类加载到内存中</li>\\n<li>加载完毕创建一个class对象</li>\\n</ul>\\n<figure><figcaption>02_类加载过程加载</figcaption></figure>\\n</li>\\n<li>\\n<p>链接</p>\\n<ul>\\n<li>\\n<p>验证</p>\\n<p>确保Class文件字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身安全</p>\\n<p>(文件中的信息是否符合虚拟机规范有没有安全隐患)</p>\\n</li>\\n</ul>\\n<figure><figcaption>03_类加载过程验证</figcaption></figure>\\n<ul>\\n<li>\\n<p>准备</p>\\n<p>负责为类的类变量（被static修饰的变量）分配内存，并设置默认初始化值</p>\\n<p>(初始化静态变量)</p>\\n</li>\\n</ul>\\n<figure><figcaption>04_类加载过程准备</figcaption></figure>\\n<ul>\\n<li>\\n<p>解析</p>\\n<p>将类的二进制数据流中的符号引用替换为直接引用</p>\\n<p>(本类中如果用到了其他类，此时就需要找到对应的类)</p>\\n</li>\\n</ul>\\n<figure><figcaption>05_类加载过程解析</figcaption></figure>\\n</li>\\n<li>\\n<p>初始化</p>\\n<p>根据程序员通过程序制定的主观计划去初始化类变量和其他资源</p>\\n<p>(静态变量赋值以及初始化其他资源)</p>\\n<figure><figcaption>06_类加载过程初始化</figcaption></figure>\\n</li>\\n</ol>\\n</li>\\n<li>\\n<p>小结</p>\\n<ul>\\n<li>当一个类被使用的时候，才会加载到内存</li>\\n<li>类加载的过程: 加载、验证、准备、解析、初始化</li>\\n</ul>\\n</li>\\n</ul>\",\"autoDesc\":true}")
