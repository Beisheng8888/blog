export const pagesRoutes = [
  ["v-184f4da6","/intro.html",{"v":"/assets/images/cover.jpg","e":"<h1> 介绍页</h1>\n<p>将你的个人介绍和档案放置在此处。</p>\n","y":"a","t":"介绍页","i":"circle-info"},[":md"]],
  ["v-8daa1a0e","/",{"y":"h","t":"主页","i":"home"},["/README.md"]],
  ["v-744ccd44","/src/",{"c":["使用指南"],"e":"<h2> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/blog/src/JavaSE/\" target=\"blank\">JavaSE</a></p>\n</li>\n<li>\n<p><a href=\"/blog/src/page.html\" target=\"blank\">页面展示</a></p>\n</li>\n<li>\n<p><a href=\"/blog/src/disable.html\" target=\"blank\">禁用展示</a></p>\n</li>\n<li>\n<p><a href=\"/blog/src/encrypt.html\" target=\"blank\">加密展示</a></p>\n</li>\n</ul>","y":"a","t":"目录","i":"laptop-code"},["/src/README.md"]],
  ["v-1542590e","/src/JavaSE/IO%E6%B5%8101.html",{"d":1640995200000,"l":"2022年1月1日","c":["JavaSE"],"e":"<h1> IO流01</h1>\n<h2> 1.File类</h2>\n<h3> 1.1File类概述和构造方法【应用】</h3>\n<ul>\n<li>\n<p>File类介绍</p>\n<ul>\n<li>它是文件和目录路径名的抽象表示</li>\n<li>文件和目录是可以通过File封装成对象的</li>\n<li>对于File而言,其封装的并不是一个真正存在的文件,仅仅是一个路径名而已.它可以是存在的,也可以是不存在的.将来是要通过具体的操作把这个路径的内容转换为具体存在的</li>\n</ul>\n</li>\n<li>\n<p>File类的构造方法</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>File(String   pathname)</td>\n<td>通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例</td>\n</tr>\n<tr>\n<td>File(String   parent, String child)</td>\n<td>从父路径名字符串和子路径名字符串创建新的   File实例</td>\n</tr>\n<tr>\n<td>File(File   parent, String child)</td>\n<td>从父抽象路径名和子路径名字符串创建新的   File实例</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>示例代码</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileDemo01</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//File(String pathname): 通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例</span>\n        <span class=\"token class-name\">File</span> f1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E:\\\\beisheng\\\\java.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//File(String parent, String child): 从父路径名字符串和子路径名字符串创建新的 File实例</span>\n        <span class=\"token class-name\">File</span> f2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E:\\\\beisheng\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"java.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//File(File parent, String child): 从父抽象路径名和子路径名字符串创建新的 File实例</span>\n        <span class=\"token class-name\">File</span> f3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E:\\\\beisheng\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">File</span> f4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>f3<span class=\"token punctuation\">,</span><span class=\"token string\">\"java.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>","y":"a","t":"IO流01","i":"pen-to-square"},["/src/JavaSE/IO流01.html","/src/JavaSE/IO流01.md",":md"]],
  ["v-11d8a7d0","/src/JavaSE/IO%E6%B5%8102.html",{"d":1640995200000,"l":"2022年1月1日","c":["JavaSE"],"e":"<h1> IO流02</h1>\n<h2> 1.字符流</h2>\n<h3> 1.1为什么会出现字符流【理解】</h3>\n<ul>\n<li>\n<p>字符流的介绍</p>\n<p>由于字节流操作中文不是特别的方便，所以Java就提供字符流</p>\n<p>字符流 = 字节流 + 编码表</p>\n</li>\n<li>\n<p>中文的字节存储方式</p>\n<p>用字节流复制文本文件时，文本文件也会有中文，但是没有问题，原因是最终底层操作会自动进行字节拼接成中文，如何识别是中文的呢？</p>\n<p>汉字在存储的时候，无论选择哪种编码存储，第一个字节都是负数</p>\n</li>\n</ul>\n<h3> 1.2编码表【理解】</h3>","y":"a","t":"IO流02","i":"pen-to-square"},["/src/JavaSE/IO流02.html","/src/JavaSE/IO流02.md",":md"]],
  ["v-546871b2","/src/JavaSE/XML%E6%9E%9A%E4%B8%BE%E6%B3%A8%E8%A7%A3.html",{"d":1640995200000,"l":"2022年1月1日","c":["JavaSE"],"e":"<h1> XML&amp;枚举&amp;注解</h1>\n<h2> 1.xml</h2>\n<h3> 1.1概述【理解】</h3>\n<ul>\n<li>\n<p>万维网联盟(W3C)</p>\n<p>万维网联盟(W3C)创建于1994年，又称W3C理事会。1994年10月在麻省理工学院计算机科学实验室成立。<br>\n建立者： Tim Berners-Lee (蒂姆·伯纳斯·李)。<br>\n是Web技术领域最具权威和影响力的国际中立性技术标准机构。<br>\n到目前为止，W3C已发布了200多项影响深远的Web技术标准及实施指南，</p>\n<ul>\n<li>\n<p>如广为业界采用的超文本标记语言HTML（标准通用标记语言下的一个应用）、</p>\n</li>\n<li>\n<p>可扩展标记语言XML（标准通用标记语言下的一个子集）</p>\n</li>\n<li>\n<p>以及帮助残障人士有效获得Web信息的无障碍指南（WCAG）等</p>\n<figure><figcaption>01_w3c概述</figcaption></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>xml概述</p>\n<p>XML的全称为(EXtensible Markup Language)，是一种可扩展的标记语言<br>\n标记语言: 通过标签来描述数据的一门语言(标签有时我们也将其称之为元素)<br>\n可扩展：标签的名字是可以自定义的,XML文件是由很多标签组成的,而标签名是可以自定义的</p>\n</li>\n<li>\n<p>作用</p>\n<ul>\n<li>用于进行存储数据和传输数据</li>\n<li>作为软件的配置文件</li>\n</ul>\n</li>\n<li>\n<p>作为配置文件的优势</p>\n<ul>\n<li>可读性好</li>\n<li>可维护性高</li>\n</ul>\n</li>\n</ul>","y":"a","t":"XML&枚举&注解","i":"pen-to-square"},["/src/JavaSE/XML枚举注解.html","/src/JavaSE/XML枚举注解.md",":md"]],
  ["v-5277e224","/src/JavaSE/%E5%86%85%E9%83%A8%E7%B1%BB%E5%92%8CLambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html",{"d":1640995200000,"l":"2022年1月1日","c":["JavaSE"],"u":true,"e":"<h1> 内部类和Lambda表达式</h1>\n<h2> 1.内部类</h2>\n<h3> 1.1 内部类的基本使用（理解）</h3>\n<ul>\n<li>\n<p>内部类概念</p>\n<ul>\n<li>在一个类中定义一个类。举例：在一个类A的内部定义一个类B，类B就被称为内部类</li>\n</ul>\n</li>\n<li>\n<p>内部类定义格式</p>\n<ul>\n<li>\n<p>格式&amp;举例：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">/*\n\t格式：\n    class 外部类名{\n    \t修饰符 class 内部类名{\n    \t\n    \t}\n    }\n*/</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Outer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Inner</span> <span class=\"token punctuation\">{</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n</li>\n<li>\n<p>内部类的访问特点</p>\n<ul>\n<li>内部类可以直接访问外部类的成员，包括私有</li>\n<li>外部类要访问内部类的成员，必须创建对象</li>\n</ul>\n</li>\n<li>\n<p>示例代码：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">/*\n    内部类访问特点：\n        内部类可以直接访问外部类的成员，包括私有\n        外部类要访问内部类的成员，必须创建对象\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Outer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Inner</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Inner</span> i <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        i<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>","y":"a","t":"内部类和Lambda表达式","i":"pen-to-square"},["/src/JavaSE/内部类和Lambda表达式.html","/src/JavaSE/内部类和Lambda表达式.md",":md"]],
  ["v-4dd306af","/src/JavaSE/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%97%A5%E5%BF%97.html",{"e":"<hr>\n<p>icon: pen-to-square<br>\ndate: 2022-01-01<br>\ncategory:</p>\n<ul>\n<li>JavaSE</li>\n</ul>\n<hr>\n<h1> 单元测试&amp;日志</h1>\n<h2> 1.单元测试</h2>\n<h3> 1.1概述【理解】</h3>\n<p>JUnit是一个 Java 编程语言的单元测试工具。JUnit 是一个非常重要的测试工具</p>\n<h3> 1.2特点【理解】</h3>\n<ul>\n<li>JUnit是一个开放源代码的测试工具。</li>\n<li>提供注解来识别测试方法。</li>\n<li>JUnit测试可以让你编写代码更快，并能提高质量。</li>\n<li>JUnit优雅简洁。没那么复杂，花费时间较少。</li>\n<li>JUnit在一个条中显示进度。如果运行良好则是绿色；如果运行失败，则变成红色。</li>\n</ul>","y":"a","t":"单元测试&日志"},["/src/JavaSE/单元测试日志.html","/src/JavaSE/单元测试日志.md",":md"]],
  ["v-5bc1edc1","/src/JavaSE/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0.html",{"d":1640995200000,"l":"2022年1月1日","c":["JavaSE"],"e":"<h1> 可变参数</h1>\n<h2> 1.可变参数</h2>\n<h3> 1.1可变参数【应用】</h3>\n<ul>\n<li>\n<p>可变参数介绍</p>\n<ul>\n<li>可变参数又称参数个数可变，用作方法的形参出现，那么方法参数个数就是可变的了</li>\n<li>方法的参数类型已经确定,个数不确定,我们可以使用可变参数</li>\n</ul>\n</li>\n<li>\n<p>可变参数定义格式</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code>修饰符 返回值类型 方法名<span class=\"token punctuation\">(</span>数据类型… 变量名<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>可变参数的注意事项</p>\n<ul>\n<li>这里的变量其实是一个数组</li>\n<li>如果一个方法有多个参数，包含可变参数，可变参数要放在最后</li>\n</ul>\n</li>\n<li>\n<p>可变参数的基本使用</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArgsDemo01</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span><span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span><span class=\"token number\">70</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//    public static int sum(int b,int... a) {</span>\n<span class=\"token comment\">//        return 0;</span>\n<span class=\"token comment\">//    }</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>","y":"a","t":"可变参数","i":"pen-to-square"},["/src/JavaSE/可变参数.html","/src/JavaSE/可变参数.md",":md"]],
  ["v-38d376d7","/src/JavaSE/%E5%A4%9A%E7%BA%BF%E7%A8%8B01.html",{"y":"a","t":"多线程01"},["/src/JavaSE/多线程01.html","/src/JavaSE/多线程01.md",":md"]],
  ["v-3a884f76","/src/JavaSE/%E5%A4%9A%E7%BA%BF%E7%A8%8B02.html",{"e":"<h1> 多线程02</h1>\n<h2> 1.线程池</h2>\n<h3> 1.1 线程状态介绍</h3>\n<p>当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。线程对象在不同的时期有不同的状态。那么Java中的线程存在哪几种状态呢？Java中的线程</p>\n<p>状态被定义在了java.lang.Thread.State枚举类中，State枚举类的源码如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">/* 新建 */</span>\n        <span class=\"token constant\">NEW</span> <span class=\"token punctuation\">,</span>\n\n        <span class=\"token comment\">/* 可运行状态 */</span>\n        <span class=\"token constant\">RUNNABLE</span> <span class=\"token punctuation\">,</span>\n\n        <span class=\"token comment\">/* 阻塞状态 */</span>\n        <span class=\"token constant\">BLOCKED</span> <span class=\"token punctuation\">,</span>\n\n        <span class=\"token comment\">/* 无限等待状态 */</span>\n        <span class=\"token constant\">WAITING</span> <span class=\"token punctuation\">,</span>\n\n        <span class=\"token comment\">/* 计时等待 */</span>\n        <span class=\"token constant\">TIMED_WAITING</span> <span class=\"token punctuation\">,</span>\n\n        <span class=\"token comment\">/* 终止 */</span>\n        <span class=\"token constant\">TERMINATED</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 获取当前线程的状态</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">State</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> jdk<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>misc<span class=\"token punctuation\">.</span><span class=\"token constant\">VM</span><span class=\"token punctuation\">.</span><span class=\"token function\">toThreadState</span><span class=\"token punctuation\">(</span>threadStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"多线程02"},["/src/JavaSE/多线程02.html","/src/JavaSE/多线程02.md",":md"]],
  ["v-63edbc13","/src/JavaSE/%E5%B8%B8%E7%94%A8API01.html",{"e":"<h1> 常用API01</h1>\n<h2> 1.API</h2>\n<h3> 1.1 API概述</h3>\n<ul>\n<li>\n<p>什么是API</p>\n<p>​\tAPI (Application Programming Interface) ：应用程序编程接口</p>\n</li>\n<li>\n<p>java中的API</p>\n<p>​\t指的就是 JDK 中提供的各种功能的 Java类，这些类将底层的实现封装了起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用即可，我们可以通过帮助文档来学习这些API如何使用。</p>\n</li>\n</ul>\n<h3> 1.2 如何使用API帮助文档【应用】</h3>","y":"a","t":"常用API01"},["/src/JavaSE/常用API01.html","/src/JavaSE/常用API01.md",":md"]],
  ["v-65a294b2","/src/JavaSE/%E5%B8%B8%E7%94%A8API02.html",{"e":"<h1> 常用API02</h1>\n<h2> 1.时间日期类</h2>\n<h3> 1.1 Date类（应用）</h3>\n<ul>\n<li>\n<p>计算机中时间原点</p>\n<p>1970年1月1日 00:00:00</p>\n</li>\n<li>\n<p>时间换算单位</p>\n<p>1秒 = 1000毫秒</p>\n</li>\n<li>\n<p>Date类概述</p>\n<p>Date 代表了一个特定的时间，精确到毫秒</p>\n</li>\n<li>\n<p>Date类构造方法</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public Date()</td>\n<td>分配一个 Date对象，并初始化，以便它代表它被分配的时间，精确到毫秒</td>\n</tr>\n<tr>\n<td>public Date(long date)</td>\n<td>分配一个 Date对象，并将其初始化为表示从标准基准时间起指定的毫秒数</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>示例代码</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DateDemo01</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//public Date()：分配一个 Date对象，并初始化，以便它代表它被分配的时间，精确到毫秒</span>\n        <span class=\"token class-name\">Date</span> d1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//public Date(long date)：分配一个 Date对象，并将其初始化为表示从标准基准时间起指定的毫秒数</span>\n        <span class=\"token keyword\">long</span> date <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token operator\">*</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Date</span> d2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>","y":"a","t":"常用API02"},["/src/JavaSE/常用API02.html","/src/JavaSE/常用API02.md",":md"]],
  ["v-7d677e30","/src/JavaSE/%E6%B3%9B%E5%9E%8B%E5%92%8CTreeSet%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91.html",{"y":"a","t":"泛型和TreeSet和二叉树"},["/src/JavaSE/泛型和TreeSet和二叉树.html","/src/JavaSE/泛型和TreeSet和二叉树.md",":md"]],
  ["v-2d44bdc0","/src/JavaSE/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E5%8F%8D%E5%B0%84.html",{"y":"a","t":"类加载器和反射"},["/src/JavaSE/类加载器和反射.html","/src/JavaSE/类加载器和反射.md",":md"]],
  ["v-3c2114ce","/src/JavaSE/%E7%BA%A2%E9%BB%91%E6%A0%91.html",{"y":"a","t":"红黑树"},["/src/JavaSE/红黑树.html","/src/JavaSE/红黑树.md",":md"]],
  ["v-a0fb4714","/src/JavaSE/%E7%BB%A7%E6%89%BF.html",{"e":"<h1> 继承</h1>\n<h2> 1. 继承</h2>\n<h3> 1.1 继承的实现（掌握）</h3>\n<ul>\n<li>\n<p>继承的概念</p>\n<ul>\n<li>继承是面向对象三大特征之一，可以使得子类具有父类的属性和方法，还可以在子类中重新定义，以及追加属性和方法</li>\n</ul>\n</li>\n<li>\n<p>实现继承的格式</p>\n<ul>\n<li>继承通过extends实现</li>\n<li>格式：class 子类 extends 父类\n<ul>\n<li>举例：class Dog extends Animal</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>继承带来的好处</p>\n<ul>\n<li>继承可以让类与类之间产生关系，子父类关系，产生子父类后，子类则可以使用父类中非私有的成员。</li>\n</ul>\n</li>\n<li>\n<p>示例代码</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Fu</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"show方法被调用\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Zi</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fu</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"method方法被调用\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//创建对象，调用方法</span>\n        <span class=\"token class-name\">Fu</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        f<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Zi</span> z <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Zi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        z<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        z<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>","y":"a","t":"继承"},["/src/JavaSE/继承.html","/src/JavaSE/继承.md",":md"]],
  ["v-781aa617","/src/JavaSE/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B.html",{"e":"<h1> 网络编程</h1>\n<h2> 1.网络编程入门</h2>\n<h3> 1.1 网络编程概述【理解】</h3>\n<ul>\n<li>\n<p>计算机网络</p>\n<p>是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统</p>\n</li>\n<li>\n<p>网络编程</p>\n<p>在网络通信协议下，不同计算机上运行的程序，可以进行数据传输</p>\n</li>\n</ul>\n<h3> 1.2 网络编程三要素【理解】</h3>\n<ul>\n<li>\n<p>IP地址</p>\n<p>要想让网络中的计算机能够互相通信，必须为每台计算机指定一个标识号，通过这个标识号来指定要接收数据的计算机和识别发送的计算机，而IP地址就是这个标识号。也就是设备的标识</p>\n</li>\n<li>\n<p>端口</p>\n<p>网络的通信，本质上是两个应用程序的通信。每台计算机都有很多的应用程序，那么在网络通信时，如何区分这些应用程序呢？如果说IP地址可以唯一标识网络中的设备，那么端口号就可以唯一标识设备中的应用程序了。也就是应用程序的标识</p>\n</li>\n<li>\n<p>协议</p>\n<p>通过计算机网络可以使多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时需要遵守一定的规则，这就好比在道路中行驶的汽车一定要遵守交通规则一样。在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守才能完成数据交换。常见的协议有 UDP 协议和 TCP 协议</p>\n</li>\n</ul>","y":"a","t":"网络编程"},["/src/JavaSE/网络编程.html","/src/JavaSE/网络编程.md",":md"]],
  ["v-59ef47dc","/src/JavaSE/%E9%9B%86%E5%90%88.html",{"y":"a","t":"集合"},["/src/JavaSE/集合.html","/src/JavaSE/集合.md",":md"]],
  ["v-3706649a","/404.html",{"y":"p","t":""},[]],
  ["v-3db1e0d7","/src/JavaSE/",{"y":"p","t":"Java S E"},[]],
  ["v-5bc93818","/category/",{"y":"p","t":"分类","I":0},[]],
  ["v-744d024e","/tag/",{"y":"p","t":"标签","I":0},[]],
  ["v-e52c881c","/article/",{"y":"p","t":"文章","I":0},[]],
  ["v-154dc4c4","/star/",{"y":"p","t":"收藏","I":0},[]],
  ["v-01560935","/timeline/",{"y":"p","t":"时间轴","I":0},[]],
  ["v-03d57386","/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{"y":"p","t":"使用指南 分类","I":0},["/category/使用指南/"]],
  ["v-128b43a3","/category/javase/",{"y":"p","t":"JavaSE 分类","I":0},[]],
]
