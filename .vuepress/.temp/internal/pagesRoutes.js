export const pagesRoutes = [
  ["v-184f4da6","/intro.html",{"v":"/assets/images/cover3.jpg","e":"<h1> 介绍页</h1>\n<p>将你的个人介绍和档案放置在此处。</p>\n","y":"a","t":"介绍页","i":"circle-info"},[":md"]],
  ["v-8daa1a0e","/",{"y":"h","t":"主页","i":"home"},["/README.md"]],
  ["v-2e3eac9e","/slides.html",{"e":"<!-- markdownlint-disable MD024 MD033 MD051 -->\n","y":"s","t":"幻灯片页","i":"person-chalkboard"},[":md"]],
  ["v-744ccd44","/src/",{"c":["使用指南"],"e":"<h2> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/blog/src/JavaSE/\" target=\"blank\">JavaSE</a></p>\n</li>\n<li>\n<p><a href=\"/blog/src/page.html\" target=\"blank\">页面展示</a></p>\n</li>\n<li>\n<p><a href=\"/blog/src/disable.html\" target=\"blank\">禁用展示</a></p>\n</li>\n<li>\n<p><a href=\"/blog/src/encrypt.html\" target=\"blank\">加密展示</a></p>\n</li>\n</ul>","y":"a","t":"目录","i":"laptop-code"},["/src/README.md"]],
  ["v-1542590e","/src/JavaSE/IO%E6%B5%8101.html",{"d":1640995200000,"l":"2022年1月1日","c":["JavaSE"],"u":true,"e":"<h1> IO流01</h1>\n<h2> 1.File类</h2>\n<h3> 1.1File类概述和构造方法【应用】</h3>\n<ul>\n<li>\n<p>File类介绍</p>\n<ul>\n<li>它是文件和目录路径名的抽象表示</li>\n<li>文件和目录是可以通过File封装成对象的</li>\n<li>对于File而言,其封装的并不是一个真正存在的文件,仅仅是一个路径名而已.它可以是存在的,也可以是不存在的.将来是要通过具体的操作把这个路径的内容转换为具体存在的</li>\n</ul>\n</li>\n<li>\n<p>File类的构造方法</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>File(String   pathname)</td>\n<td>通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例</td>\n</tr>\n<tr>\n<td>File(String   parent, String child)</td>\n<td>从父路径名字符串和子路径名字符串创建新的   File实例</td>\n</tr>\n<tr>\n<td>File(File   parent, String child)</td>\n<td>从父抽象路径名和子路径名字符串创建新的   File实例</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>示例代码</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileDemo01</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//File(String pathname): 通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例</span>\n        <span class=\"token class-name\">File</span> f1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E:\\\\beisheng\\\\java.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//File(String parent, String child): 从父路径名字符串和子路径名字符串创建新的 File实例</span>\n        <span class=\"token class-name\">File</span> f2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E:\\\\beisheng\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"java.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//File(File parent, String child): 从父抽象路径名和子路径名字符串创建新的 File实例</span>\n        <span class=\"token class-name\">File</span> f3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E:\\\\beisheng\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">File</span> f4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>f3<span class=\"token punctuation\">,</span><span class=\"token string\">\"java.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>","y":"a","t":"IO流01","i":"pen-to-square"},["/src/JavaSE/IO流01.html","/src/JavaSE/IO流01.md",":md"]],
  ["v-11d8a7d0","/src/JavaSE/IO%E6%B5%8102.html",{"d":1640995200000,"l":"2022年1月1日","c":["JavaSE"],"u":true,"e":"<h1> IO流02</h1>\n<h2> 1.字符流</h2>\n<h3> 1.1为什么会出现字符流【理解】</h3>\n<ul>\n<li>\n<p>字符流的介绍</p>\n<p>由于字节流操作中文不是特别的方便，所以Java就提供字符流</p>\n<p>字符流 = 字节流 + 编码表</p>\n</li>\n<li>\n<p>中文的字节存储方式</p>\n<p>用字节流复制文本文件时，文本文件也会有中文，但是没有问题，原因是最终底层操作会自动进行字节拼接成中文，如何识别是中文的呢？</p>\n<p>汉字在存储的时候，无论选择哪种编码存储，第一个字节都是负数</p>\n</li>\n</ul>\n<h3> 1.2编码表【理解】</h3>","y":"a","t":"IO流02","i":"pen-to-square"},["/src/JavaSE/IO流02.html","/src/JavaSE/IO流02.md",":md"]],
  ["v-546871b2","/src/JavaSE/XML%E6%9E%9A%E4%B8%BE%E6%B3%A8%E8%A7%A3.html",{"d":1640995200000,"l":"2022年1月1日","c":["JavaSE"],"u":true,"e":"<h1> XML&amp;枚举&amp;注解</h1>\n<h2> 1.xml</h2>\n<h3> 1.1概述【理解】</h3>\n<ul>\n<li>\n<p>万维网联盟(W3C)</p>\n<p>万维网联盟(W3C)创建于1994年，又称W3C理事会。1994年10月在麻省理工学院计算机科学实验室成立。<br>\n建立者： Tim Berners-Lee (蒂姆·伯纳斯·李)。<br>\n是Web技术领域最具权威和影响力的国际中立性技术标准机构。<br>\n到目前为止，W3C已发布了200多项影响深远的Web技术标准及实施指南，</p>\n<ul>\n<li>\n<p>如广为业界采用的超文本标记语言HTML（标准通用标记语言下的一个应用）、</p>\n</li>\n<li>\n<p>可扩展标记语言XML（标准通用标记语言下的一个子集）</p>\n</li>\n<li>\n<p>以及帮助残障人士有效获得Web信息的无障碍指南（WCAG）等</p>\n<figure><figcaption>01_w3c概述</figcaption></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>xml概述</p>\n<p>XML的全称为(EXtensible Markup Language)，是一种可扩展的标记语言<br>\n标记语言: 通过标签来描述数据的一门语言(标签有时我们也将其称之为元素)<br>\n可扩展：标签的名字是可以自定义的,XML文件是由很多标签组成的,而标签名是可以自定义的</p>\n</li>\n<li>\n<p>作用</p>\n<ul>\n<li>用于进行存储数据和传输数据</li>\n<li>作为软件的配置文件</li>\n</ul>\n</li>\n<li>\n<p>作为配置文件的优势</p>\n<ul>\n<li>可读性好</li>\n<li>可维护性高</li>\n</ul>\n</li>\n</ul>","y":"a","t":"XML&枚举&注解","i":"pen-to-square"},["/src/JavaSE/XML枚举注解.html","/src/JavaSE/XML枚举注解.md",":md"]],
  ["v-5277e224","/src/JavaSE/%E5%86%85%E9%83%A8%E7%B1%BB%E5%92%8CLambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html",{"d":1640995200000,"l":"2022年1月1日","c":["JavaSE"],"u":true,"e":"<h1> 内部类和Lambda表达式</h1>\n<h2> 1.内部类</h2>\n<h3> 1.1 内部类的基本使用（理解）</h3>\n<ul>\n<li>\n<p>内部类概念</p>\n<ul>\n<li>在一个类中定义一个类。举例：在一个类A的内部定义一个类B，类B就被称为内部类</li>\n</ul>\n</li>\n<li>\n<p>内部类定义格式</p>\n<ul>\n<li>\n<p>格式&amp;举例：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">/*\n\t格式：\n    class 外部类名{\n    \t修饰符 class 内部类名{\n    \t\n    \t}\n    }\n*/</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Outer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Inner</span> <span class=\"token punctuation\">{</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n</li>\n<li>\n<p>内部类的访问特点</p>\n<ul>\n<li>内部类可以直接访问外部类的成员，包括私有</li>\n<li>外部类要访问内部类的成员，必须创建对象</li>\n</ul>\n</li>\n<li>\n<p>示例代码：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">/*\n    内部类访问特点：\n        内部类可以直接访问外部类的成员，包括私有\n        外部类要访问内部类的成员，必须创建对象\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Outer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Inner</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Inner</span> i <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        i<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>","y":"a","t":"内部类和Lambda表达式","i":"pen-to-square"},["/src/JavaSE/内部类和Lambda表达式.html","/src/JavaSE/内部类和Lambda表达式.md",":md"]],
  ["v-3706649a","/404.html",{"y":"p","t":""},[]],
  ["v-3db1e0d7","/src/JavaSE/",{"y":"p","t":"Java S E"},[]],
  ["v-5bc93818","/category/",{"y":"p","t":"分类","I":0},[]],
  ["v-744d024e","/tag/",{"y":"p","t":"标签","I":0},[]],
  ["v-e52c881c","/article/",{"y":"p","t":"文章","I":0},[]],
  ["v-154dc4c4","/star/",{"y":"p","t":"收藏","I":0},[]],
  ["v-01560935","/timeline/",{"y":"p","t":"时间轴","I":0},[]],
  ["v-03d57386","/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{"y":"p","t":"使用指南 分类","I":0},["/category/使用指南/"]],
  ["v-128b43a3","/category/javase/",{"y":"p","t":"JavaSE 分类","I":0},[]],
]
